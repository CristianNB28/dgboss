        <div class="footer">
            
        </div>
    </div>
</div>

<!-- Mainly scripts -->
<script src="/js/jquery-3.1.1.min.js"></script>
<script src="/js/jquery-2.1.1.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.js"></script>
<script src="/js/plugins/metisMenu/jquery.metisMenu.js"></script>
<script src="/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

<!-- Custom and plugin javascript -->
<script src="/js/inspinia.js"></script>
<script src="/js/plugins/pace/pace.min.js"></script>

<!-- Steps -->
<script src="/js/plugins/steps/jquery.steps.min.js"></script>

<!-- Jquery Validate -->
<script src="/js/plugins/validate/jquery.validate.min.js"></script>

<script src="/js/plugins/jquery.cookie/jquery.cookie.js"></script>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="/js/moment.js"></script>

<script src="/js/cleave-js/cleave.min.js"></script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-patrimonial").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 2)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-patrimonial .steps a:eq(0)').click();
                $('#form-patrimonial').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-patrimonial-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-patrimonial").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#receipt-form-patrimonial").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-patrimonial").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-bail").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 2)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-bail .steps a:eq(0)').click();
                $('#form-bail').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-bail-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-bail").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#receipt-form-bail").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-bail").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-another-branch").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 2)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-another-branch .steps a:eq(0)').click();
                $('#form-another-branch').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-another-branch-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-another-branch").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#receipt-form-another-branch").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-another-branch").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-ap").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 2)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-ap .steps a:eq(0)').click();
                $('#form-ap').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-ap-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-ap").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#receipt-form-ap").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-travel").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 2)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-travel .steps a:eq(0)').click();
                $('#form-travel').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-travel-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-travel").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#receipt-form-travel").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
    });
</script>

<% if(typeof alert != 'undefined') { %>
    <script>
        Swal.fire({
            title: '<%= alertTitle %>',
            text: '<%= alertMessage %>',
            icon: '<%= alertIcon %>',
            showConfirmButton: <%= showConfirmButton %>,
            timer: <%= timer %>
        }).then(()=>{
            window.location='/<%= ruta %>'
        })
    </script>
<% } %>

<!-- Poliza de Patrimonial -->
<script>
    function storeValuesPolicyPatrimonial() {
        let formDataPolicyPatrimonial = [];
        localStorage.removeItem('formDataPolicyPatrimonial');
        $('#policy-form-patrimonial input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-patrimonial input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-patrimonial input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-patrimonial input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-patrimonial select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-patrimonial #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-patrimonial #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyPatrimonial.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyPatrimonial", JSON.stringify(formDataPolicyPatrimonial));
    }
    function getPolicyPatrimonial() {
        if(localStorage.formDataPolicyPatrimonial !== undefined){
            const formDataPolicyPatrimonial = JSON.parse(localStorage.formDataPolicyPatrimonial);
            for (var i = 0; i < formDataPolicyPatrimonial.length; i++) {
                $(`#policy-form-patrimonial [name=${formDataPolicyPatrimonial[i].name}]`).val(formDataPolicyPatrimonial[i].value);
                if ((formDataPolicyPatrimonial[i].name === 'tomador_asegurado_poliza') && (formDataPolicyPatrimonial[i].value === true)) {
                    $('#policy-form-patrimonial #tomador_asegurado_poliza').prop('checked', formDataPolicyPatrimonial[i].value);
                }
                if ((formDataPolicyPatrimonial[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyPatrimonial[i].value === true)) {
                    $('#policy-form-patrimonial #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyPatrimonial[i].value);
                    $('#policy-form-patrimonial #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyPatrimonial[i].name === 'tipo_canal_poliza') && (formDataPolicyPatrimonial[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-patrimonial #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyPatrimonialList() {
        if(localStorage.formDataPolicyPatrimonial !== undefined){
            const formDataPolicyPatrimonial = JSON.parse(localStorage.formDataPolicyPatrimonial);
            const lengthPolicyPatrimonial = Math.trunc(formDataPolicyPatrimonial.length / 2);
            const listPatrimonialElement1 = $("#list-patrimonial-policy1");
            const listPatrimonialElement2 = $("#list-patrimonial-policy2");
            for (let i = 0; i < lengthPolicyPatrimonial; i++) {
                listPatrimonialElement1.append(`<li class="list-group-item">${formDataPolicyPatrimonial[i].label}: ${formDataPolicyPatrimonial[i].value}</li>`);
            }
            for (let i = lengthPolicyPatrimonial; i < formDataPolicyPatrimonial.length; i++) {
                listPatrimonialElement2.append(`<li class="list-group-item">${formDataPolicyPatrimonial[i].label}: ${formDataPolicyPatrimonial[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptPatrimonial() {
        let formDataReceiptPatrimonial = [];
        localStorage.removeItem('formDataReceiptPatrimonial');
        $('#receipt-form-patrimonial input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-patrimonial input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-patrimonial input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-patrimonial select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptPatrimonial.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptPatrimonial", JSON.stringify(formDataReceiptPatrimonial));
    }
    function getReceiptPatrimonial() {
        if(localStorage.formDataReceiptPatrimonial !== undefined){
            const formDataReceiptPatrimonial = JSON.parse(localStorage.formDataReceiptPatrimonial);
            for (var i = 0; i < formDataReceiptPatrimonial.length; i++) {
                $(`#receipt-form-patrimonial [name=${formDataReceiptPatrimonial[i].name}]`).val(formDataReceiptPatrimonial[i].value);
            }
        }
    }
    function getReceiptPatrimonialList() {
        if(localStorage.formDataReceiptPatrimonial !== undefined){
            const formDataReceiptPatrimonial = JSON.parse(localStorage.formDataReceiptPatrimonial);
            const lengthReceiptPatrimonial = Math.trunc(formDataReceiptPatrimonial.length / 2);
            const listReceiptPatrimonialElement1 = $("#list-patrimonial-receipt1");
            const listReceiptPatrimonialElement2 = $("#list-patrimonial-receipt2");
            for (let i = 0; i < lengthReceiptPatrimonial; i++) {
                listReceiptPatrimonialElement1.append(`<li class="list-group-item">${formDataReceiptPatrimonial[i].label}: ${formDataReceiptPatrimonial[i].value}</li>`);
            }
            for (let i = lengthReceiptPatrimonial; i < formDataReceiptPatrimonial.length; i++) {
                listReceiptPatrimonialElement2.append(`<li class="list-group-item">${formDataReceiptPatrimonial[i].label}: ${formDataReceiptPatrimonial[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Fianza -->
<script>
    function storeValuesPolicyBail() {
        let formDataPolicyBail = [];
        localStorage.removeItem('formDataPolicyBail');
        $('#policy-form-bail input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-bail input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-bail input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-bail input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-bail select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-bail #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyBail.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-bail #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyBail.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyBail", JSON.stringify(formDataPolicyBail));
    }
    function getPolicyBail() {
        if(localStorage.formDataPolicyBail !== undefined){
            const formDataPolicyBail = JSON.parse(localStorage.formDataPolicyBail);
            for (var i = 0; i < formDataPolicyBail.length; i++) {
                $(`#policy-form-bail [name=${formDataPolicyBail[i].name}]`).val(formDataPolicyBail[i].value);
                if ((formDataPolicyBail[i].name === 'tomador_asegurado_poliza') && (formDataPolicyBail[i].value === true)) {
                    $('#policy-form-bail #tomador_asegurado_poliza').prop('checked', formDataPolicyBail[i].value);
                }
                if ((formDataPolicyBail[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyBail[i].value === true)) {
                    $('#policy-form-bail #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyBail[i].value);
                    $('#policy-form-bail #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyBail[i].name === 'tipo_canal_poliza') && (formDataPolicyBail[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-bail #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyBailList() {
        if(localStorage.formDataPolicyBail !== undefined){
            const formDataPolicyBail = JSON.parse(localStorage.formDataPolicyBail);
            const lengthPolicyBail = Math.trunc(formDataPolicyBail.length / 2);
            const listBailElement1 = $("#list-bail-policy1");
            const listBailElement2 = $("#list-bail-policy2");
            for (let i = 0; i < lengthPolicyBail; i++) {
                listBailElement1.append(`<li class="list-group-item">${formDataPolicyBail[i].label}: ${formDataPolicyBail[i].value}</li>`);
            }
            for (let i = lengthPolicyBail; i < formDataPolicyBail.length; i++) {
                listBailElement2.append(`<li class="list-group-item">${formDataPolicyBail[i].label}: ${formDataPolicyBail[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptBail() {
        let formDataReceiptBail = [];
        localStorage.removeItem('formDataReceiptBail');
        $('#receipt-form-bail input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-bail input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-bail input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptBail.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-bail select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptBail.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptBail", JSON.stringify(formDataReceiptBail));
    }
    function getReceiptBail() {
        if(localStorage.formDataReceiptBail !== undefined){
            const formDataReceiptBail = JSON.parse(localStorage.formDataReceiptBail);
            for (var i = 0; i < formDataReceiptBail.length; i++) {
                $(`#receipt-form-bail [name=${formDataReceiptBail[i].name}]`).val(formDataReceiptBail[i].value);
            }
        }
    }
    function getReceiptBailList() {
        if(localStorage.formDataReceiptBail !== undefined){
            const formDataReceiptBail = JSON.parse(localStorage.formDataReceiptBail);
            const lengthReceiptBail = Math.trunc(formDataReceiptBail.length / 2);
            const listReceiptBailElement1 = $("#list-bail-receipt1");
            const listReceiptBailElement2 = $("#list-bail-receipt2");
            for (let i = 0; i < lengthReceiptBail; i++) {
                listReceiptBailElement1.append(`<li class="list-group-item">${formDataReceiptBail[i].label}: ${formDataReceiptBail[i].value}</li>`);
            }
            for (let i = lengthReceiptBail; i < formDataReceiptBail.length; i++) {
                listReceiptBailElement2.append(`<li class="list-group-item">${formDataReceiptBail[i].label}: ${formDataReceiptBail[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Otros Ramos -->
<script>
    function storeValuesPolicyAnotherBranch() {
        let formDataPolicyAnotherBranch = [];
        localStorage.removeItem('formDataPolicyAnotherBranch');
        $('#policy-form-another-branch input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-another-branch input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-another-branch input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-another-branch input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-another-branch select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-another-branch #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-another-branch #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyAnotherBranch.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyAnotherBranch", JSON.stringify(formDataPolicyAnotherBranch));
    }
    function getPolicyAnotherBranch() {
        if(localStorage.formDataPolicyAnotherBranch !== undefined){
            const formDataPolicyAnotherBranch = JSON.parse(localStorage.formDataPolicyAnotherBranch);
            for (var i = 0; i < formDataPolicyAnotherBranch.length; i++) {
                $(`#policy-form-another-branch [name=${formDataPolicyAnotherBranch[i].name}]`).val(formDataPolicyAnotherBranch[i].value);
                if ((formDataPolicyAnotherBranch[i].name === 'tomador_asegurado_poliza') && (formDataPolicyAnotherBranch[i].value === true)) {
                    $('#policy-form-another-branch #tomador_asegurado_poliza').prop('checked', formDataPolicyAnotherBranch[i].value);
                }
                if ((formDataPolicyAnotherBranch[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyAnotherBranch[i].value === true)) {
                    $('#policy-form-another-branch #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyAnotherBranch[i].value);
                    $('#policy-form-another-branch #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyAnotherBranch[i].name === 'tipo_canal_poliza') && (formDataPolicyAnotherBranch[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-another-branch #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyAnotherBranchList() {
        if(localStorage.formDataPolicyAnotherBranch !== undefined){
            const formDataPolicyAnotherBranch = JSON.parse(localStorage.formDataPolicyAnotherBranch);
            const lengthPolicyAnotherBranch = Math.trunc(formDataPolicyAnotherBranch.length / 2);
            const listAnotherBranchElement1 = $("#list-another-branch-policy1");
            const listAnotherBranchElement2 = $("#list-another-branch-policy2");
            for (let i = 0; i < lengthPolicyAnotherBranch; i++) {
                listAnotherBranchElement1.append(`<li class="list-group-item">${formDataPolicyAnotherBranch[i].label}: ${formDataPolicyAnotherBranch[i].value}</li>`);
            }
            for (let i = lengthPolicyAnotherBranch; i < formDataPolicyAnotherBranch.length; i++) {
                listAnotherBranchElement2.append(`<li class="list-group-item">${formDataPolicyAnotherBranch[i].label}: ${formDataPolicyAnotherBranch[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptAnotherBranch() {
        let formDataReceiptAnotherBranch = [];
        localStorage.removeItem('formDataReceiptAnotherBranch');
        $('#receipt-form-another-branch input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-another-branch input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-another-branch input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-another-branch select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAnotherBranch.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptAnotherBranch", JSON.stringify(formDataReceiptAnotherBranch));
    }
    function getReceiptAnotherBranch() {
        if(localStorage.formDataReceiptAnotherBranch !== undefined){
            const formDataReceiptAnotherBranch = JSON.parse(localStorage.formDataReceiptAnotherBranch);
            for (var i = 0; i < formDataReceiptAnotherBranch.length; i++) {
                $(`#receipt-form-another-branch [name=${formDataReceiptAnotherBranch[i].name}]`).val(formDataReceiptAnotherBranch[i].value);
            }
        }
    }
    function getReceiptAnotherBranchList() {
        if(localStorage.formDataReceiptAnotherBranch !== undefined){
            const formDataReceiptAnotherBranch = JSON.parse(localStorage.formDataReceiptAnotherBranch);
            const lengthReceiptAnotherBranch = Math.trunc(formDataReceiptAnotherBranch.length / 2);
            const listReceiptAnotherBranchElement1 = $("#list-another-branch-receipt1");
            const listReceiptAnotherBranchElement2 = $("#list-another-branch-receipt2");
            for (let i = 0; i < lengthReceiptAnotherBranch; i++) {
                listReceiptAnotherBranchElement1.append(`<li class="list-group-item">${formDataReceiptAnotherBranch[i].label}: ${formDataReceiptAnotherBranch[i].value}</li>`);
            }
            for (let i = lengthReceiptAnotherBranch; i < formDataReceiptAnotherBranch.length; i++) {
                listReceiptAnotherBranchElement2.append(`<li class="list-group-item">${formDataReceiptAnotherBranch[i].label}: ${formDataReceiptAnotherBranch[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de AP -->
<script>
    function storeValuesPolicyAp() {
        let formDataPolicyAp = [];
        localStorage.removeItem('formDataPolicyAp');
        $('#policy-form-ap input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-ap input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-ap input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-ap input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-ap select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-ap #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyAp.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-ap #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyAp.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyAp", JSON.stringify(formDataPolicyAp));
    }
    function getPolicyAp() {
        if(localStorage.formDataPolicyAp !== undefined){
            const formDataPolicyAp = JSON.parse(localStorage.formDataPolicyAp);
            for (var i = 0; i < formDataPolicyAp.length; i++) {
                $(`#policy-form-ap [name=${formDataPolicyAp[i].name}]`).val(formDataPolicyAp[i].value);
                if ((formDataPolicyAp[i].name === 'tomador_asegurado_poliza') && (formDataPolicyAp[i].value === true)) {
                    $('#policy-form-ap #tomador_asegurado_poliza').prop('checked', formDataPolicyLife[i].value);
                }
                if ((formDataPolicyAp[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyAp[i].value === true)) {
                    $('#policy-form-ap #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyAp[i].value);
                    $('#policy-form-ap #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyAp[i].name === 'tipo_canal_poliza') && (formDataPolicyAp[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-ap #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyApList() {
        if(localStorage.formDataPolicyAp !== undefined){
            const formDataPolicyAp = JSON.parse(localStorage.formDataPolicyAp);
            const lengthPolicyAp = Math.trunc(formDataPolicyAp.length / 2);
            const listApElement1 = $("#list-ap-policy1");
            const listApElement2 = $("#list-ap-policy2");
            for (let i = 0; i < lengthPolicyAp; i++) {
                listApElement1.append(`<li class="list-group-item">${formDataPolicyAp[i].label}: ${formDataPolicyAp[i].value}</li>`);
            }
            for (let i = lengthPolicyAp; i < formDataPolicyAp.length; i++) {
                listApElement2.append(`<li class="list-group-item">${formDataPolicyAp[i].label}: ${formDataPolicyAp[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptAp() {
        let formDataReceiptAp = [];
        localStorage.removeItem('formDataReceiptAp');
        $('#receipt-form-ap input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-ap input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-ap input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAp.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-ap select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptAp.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptAp", JSON.stringify(formDataReceiptAp));
    }
    function getReceiptAp() {
        if(localStorage.formDataReceiptAp !== undefined){
            const formDataReceiptAp = JSON.parse(localStorage.formDataReceiptAp);
            for (var i = 0; i < formDataReceiptAp.length; i++) {
                $(`#receipt-form-ap [name=${formDataReceiptAp[i].name}]`).val(formDataReceiptAp[i].value);
            }
        }
    }
    function getReceiptApList() {
        if(localStorage.formDataReceiptAp !== undefined){
            const formDataReceiptAp = JSON.parse(localStorage.formDataReceiptAp);
            const lengthReceiptAp = Math.trunc(formDataReceiptAp.length / 2);
            const listReceiptApElement1 = $("#list-ap-receipt1");
            const listReceiptApElement2 = $("#list-ap-receipt2");
            for (let i = 0; i < lengthReceiptAp; i++) {
                listReceiptApElement1.append(`<li class="list-group-item">${formDataReceiptAp[i].label}: ${formDataReceiptAp[i].value}</li>`);
            }
            for (let i = lengthReceiptAp; i < formDataReceiptAp.length; i++) {
                listReceiptApElement2.append(`<li class="list-group-item">${formDataReceiptAp[i].label}: ${formDataReceiptAp[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Viaje -->
<script>
    function storeValuesPolicyTravel() {
        let formDataPolicyTravel = [];
        localStorage.removeItem('formDataPolicyTravel');
        $('#policy-form-travel input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-travel input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-travel input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-travel input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-travel select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-travel #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-travel #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyTravel.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyTravel", JSON.stringify(formDataPolicyTravel));
    }
    function getPolicyTravel() {
        if(localStorage.formDataPolicyTravel !== undefined){
            const formDataPolicyTravel = JSON.parse(localStorage.formDataPolicyTravel);
            for (var i = 0; i < formDataPolicyTravel.length; i++) {
                $(`#policy-form-travel [name=${formDataPolicyTravel[i].name}]`).val(formDataPolicyTravel[i].value);
                if ((formDataPolicyTravel[i].name === 'tomador_asegurado_poliza') && (formDataPolicyTravel[i].value === true)) {
                    $('#policy-form-travel #tomador_asegurado_poliza').prop('checked', formDataPolicyLife[i].value);
                }
                if ((formDataPolicyTravel[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyTravel[i].value === true)) {
                    $('#policy-form-travel #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyTravel[i].value);
                    $('#policy-form-travel #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyTravel[i].name === 'tipo_canal_poliza') && (formDataPolicyTravel[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-travel #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyTravelList() {
        if(localStorage.formDataPolicyTravel !== undefined){
            const formDataPolicyTravel = JSON.parse(localStorage.formDataPolicyTravel);
            const lengthPolicyTravel = Math.trunc(formDataPolicyTravel.length / 2);
            const listTravelElement1 = $("#list-travel-policy1");
            const listTravelElement2 = $("#list-travel-policy2");
            for (let i = 0; i < lengthPolicyTravel; i++) {
                listTravelElement1.append(`<li class="list-group-item">${formDataPolicyTravel[i].label}: ${formDataPolicyTravel[i].value}</li>`);
            }
            for (let i = lengthPolicyTravel; i < formDataPolicyTravel.length; i++) {
                listTravelElement2.append(`<li class="list-group-item">${formDataPolicyTravel[i].label}: ${formDataPolicyTravel[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptTravel() {
        let formDataReceiptTravel = [];
        localStorage.removeItem('formDataReceiptTravel');
        $('#receipt-form-travel input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-travel input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-travel input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-travel select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptTravel.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptTravel", JSON.stringify(formDataReceiptTravel));
    }
    function getReceiptTravel() {
        if(localStorage.formDataReceiptTravel !== undefined){
            const formDataReceiptTravel = JSON.parse(localStorage.formDataReceiptTravel);
            for (var i = 0; i < formDataReceiptTravel.length; i++) {
                $(`#receipt-form-travel [name=${formDataReceiptTravel[i].name}]`).val(formDataReceiptTravel[i].value);
            }
        }
    }
    function getReceiptTravelList() {
        if(localStorage.formDataReceiptTravel !== undefined){
            const formDataReceiptTravel = JSON.parse(localStorage.formDataReceiptTravel);
            const lengthReceiptTravel = Math.trunc(formDataReceiptTravel.length / 2);
            const listReceiptTravelElement1 = $("#list-travel-receipt1");
            const listReceiptTravelElement2 = $("#list-travel-receipt2");
            for (let i = 0; i < lengthReceiptTravel; i++) {
                listReceiptTravelElement1.append(`<li class="list-group-item">${formDataReceiptTravel[i].label}: ${formDataReceiptTravel[i].value}</li>`);
            }
            for (let i = lengthReceiptTravel; i < formDataReceiptTravel.length; i++) {
                listReceiptTravelElement2.append(`<li class="list-group-item">${formDataReceiptTravel[i].label}: ${formDataReceiptTravel[i].value}</li>`);
            }
        }
    }
</script>

<script>
    $(document).ready(function () {
        // Poliza Patrimonial
        $("#btn_patrimonial_policy").on('click', function (event) {
            storeValuesPolicyPatrimonial();
        });
        $("#btn_patrimonial_receipt").on('click', function (event) {
            storeValuesReceiptPatrimonial();
        });

        $("#btn_patrimonial_list").on('click', function (event) {
            localStorage.clear();
        });
        
        getPolicyPatrimonial();
        getPolicyPatrimonialList();
        getReceiptPatrimonial();
        getReceiptPatrimonialList();

        // Poliza Fianza
        $("#btn_bail_policy").on('click', function (event) {
            storeValuesPolicyBail();
        });
        $("#btn_bail_receipt").on('click', function (event) {
            storeValuesReceiptBail();
        });

        $("#btn_bail_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyBail();
        getPolicyBailList();
        getReceiptBail();
        getReceiptBailList();

        // Poliza Otros Ramos
        $("#btn_another_branch_policy").on('click', function (event) {
            storeValuesPolicyAnotherBranch();
        });
        $("#btn_another_branch_receipt").on('click', function (event) {
            storeValuesReceiptAnotherBranch();
        });

        $("#btn_another_branch_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyAnotherBranch();
        getPolicyAnotherBranchList();
        getReceiptAnotherBranch();
        getReceiptAnotherBranchList();

        // Poliza AP
        $("#btn_ap_policy").on('click', function (event) {
            storeValuesPolicyAp();
        });
        $("#btn_ap_receipt").on('click', function (event) {
            storeValuesReceiptAp();
        });

        $("#btn_ap_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyAp();
        getPolicyApList();
        getReceiptAp();
        getReceiptApList();

        // Poliza Viaje
        $("#btn_travel_policy").on('click', function (event) {
            storeValuesPolicyTravel();
        });
        $("#btn_travel_receipt").on('click', function (event) {
            storeValuesReceiptTravel();
        });

        $("#btn_travel_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyTravel();
        getPolicyTravelList();
        getReceiptTravel();
        getReceiptTravelList();

        if ($('#tipo_canal_poliza').val()=== 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        }

        if ($('#fraccionamiento_boolean_poliza').prop('checked') === true) {
            document.getElementById("active-select-1").style.display = "inline";
        }

        if (($('#select_box').val() === 'V') || ($('#select_box').val() === 'E')) {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });
        } else {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: '!',
                delimiter: '',
                stripLeadingZeroes: false
            });
        }

        $('#select_box').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false,
                });
                cleaveNumeral.setRawValue('');
            }
        });

        if (($('#select_box2').val() === 'V') || ($('#select_box2').val() === 'E')) {
            var cleaveNumeral = new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });
        } else {
            var cleaveNumeral = new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: '!',
                delimiter: '',
                stripLeadingZeroes: false
            });
        }

        $('#select_box2').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            }
        });
        
        $('#fecha_desde_poliza').change(function () {
            var extraer = $('#fecha_desde_poliza').val();
            extraer = extraer.split('-');
            year = parseInt(extraer[0]);
            month = parseInt(extraer[1]) - 1;
            day = parseInt(extraer[2]);
            var fecha = moment([year, month, day]).add(1, 'years');
            fecha = fecha.toISOString().substring(0, 10);
            $('#fecha_hasta_poliza').val(fecha);
        });

        $('.porcentaje_tasa').keyup(function () {
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });
        });
    });
</script>

<script>
    window.addEventListener("load", function() {
        document.getElementById("radioContainer").addEventListener("click", function() {
            document.getElementById("active-select-1").style.display = document.getElementById("fraccionamiento_boolean_poliza").checked ? "inline" : "none";
        });
    });
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreTomador() {
        var idRif = document.getElementById("id_rif_tomador").value;
        var selectBox = document.getElementById("select_box").value;
        var checkboxTomadorViejo = document.getElementById("tomador_asegurado_poliza").checked;
        if ((selectBox === 'J') || (selectBox === 'G') || (selectBox === 'I') || (selectBox === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_tomador").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_tomador_poliza").value = elementLegalInsured.razon_social_per_jur;
                    if (checkboxTomadorViejo === true) {
                        document.getElementById("select_box2").value = elementLegalInsured.tipo_rif_asegurado_per_jur;
                        document.getElementById("id_rif_asegurado").value = elementLegalInsured.rif_asegurado_per_jur;
                        document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                        document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    } else {
                        document.getElementById("select_box2").value = 'V';
                        document.getElementById("id_rif_asegurado").value = ''
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                    break;
                } else {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_poliza").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_tomador").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_tomador_poliza").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        if (checkboxTomadorViejo === true) {
                            document.getElementById("select_box2").value = elementNaturalInsured.tipo_cedula_asegurado_per_nat;
                            document.getElementById("id_rif_asegurado").value = elementNaturalInsured.cedula_asegurado_per_nat;
                            document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                            document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        } else {
                            document.getElementById("select_box2").value = 'V';
                            document.getElementById("id_rif_asegurado").value = ''
                            document.getElementById("correo_asegurado").value = '';
                            document.getElementById("nombre_asegurado").value = '';
                        }
                        break;
                    } else {
                        document.getElementById("correo_tomador").value = '';
                        document.getElementById("nombre_tomador_poliza").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_poliza").value = '';
                }
            }
        }
    }
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreAsegurado() {
        var idRif = document.getElementById("id_rif_asegurado").value;
        var selectBox2 = document.getElementById("select_box2").value;
        if ((selectBox2 === 'J') || (selectBox2 === 'G') || (selectBox2 === 'I') || (selectBox2 === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox2 === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    break;
                } else {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox2 === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        break;
                    } else {
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        }
    }
</script>

<script>
    function showList() {
        var getSelectValue = document.getElementById("tipo_canal_poliza").value;
        if (getSelectValue === 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        } else {
            document.getElementById("nombre_agentes_propios").value = '';
            document.getElementById("searchList").style.display = "none";
        }
    }   
</script>

<script>
    function currencySignChange() {
        let coinType = document.getElementById("tipo_moneda_poliza").value;
        if (coinType === 'BOLÍVAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
            });
        } else if (coinType === 'DÓLAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
            });
        } else if (coinType === 'EUROS') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
            });
        }
    }   
</script>

<script>
    function premiumCalculationDate() {
        var getSelectValue = document.getElementById("tipo_fraccionamiento_poliza").value;
        var checkboxDivision = document.getElementById("fraccionamiento_boolean_poliza").checked;
        if (getSelectValue === 'MENSUAL') {
            document.getElementById("numero_pago_poliza").value = '';
        } else if (getSelectValue === 'BIMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 6;
        } else if (getSelectValue === 'TRIMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 4;
        } else if (getSelectValue === 'SEMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 2;
        }  else if (getSelectValue === 'ANUAL') {
            document.getElementById("numero_pago_poliza").value = 1;
        }
        if (checkboxDivision === false) {
            document.getElementById("numero_pago_poliza").value = 0;
            document.getElementById("tipo_fraccionamiento_poliza").value = '';
        }
    }
</script>

<script>
    function premiumCalculation() {
        let netPremium = document.getElementById("prima_neta_poliza").value;
        let coinType = document.getElementById("tipo_moneda_poliza").value;
        netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
        if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
            netPremium = netPremium.replaceAll(".", "");
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        } else if (netPremium.indexOf(',') !== -1) {
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium);
        } else if (netPremium.indexOf('.') !== -1) {
            netPremium = netPremium.replaceAll(".", ",");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        }
        let igtf = Number(netPremium) * 0.03;
        let totalPremium = Number(netPremium) + Number(igtf);
        igtf = igtf.toFixed(2);
        totalPremium = totalPremium.toFixed(2);
        if (coinType === 'BOLÍVAR') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'DÓLAR') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'EUROS') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        }
    }
</script>


<% if (Object.keys(policy).length !== 0) { %>
    <script>
        var policy = <%- JSON.stringify(policy) %>;
        function dateAutomation() {
            if (policy.tipo_fraccionamiento_poliza === 'MENSUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'BIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(2, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'TRIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(3, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'SEMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(6, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }  else if (policy.tipo_fraccionamiento_poliza === 'ANUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'years');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }
        }
    </script>

    <script>
        var policy = <%- JSON.stringify(policy) %>;
        window.onload = function() {
            let netPremium = document.getElementById("prima_neta_recibo").value;
            netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
            if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
                netPremium = netPremium.replaceAll(".", "");
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            } else if (netPremium.indexOf(',') !== -1) {
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium);
            } else if (netPremium.indexOf('.') !== -1) {
                netPremium = netPremium.replaceAll(".", ",");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            }
            let igtf = Number(netPremium) * 0.03;
            let totalPremium = Number(netPremium) + Number(igtf);
            igtf = igtf.toFixed(2);
            totalPremium = totalPremium.toFixed(2);
            if (policy.tipo_moneda_poliza === 'BOLÍVAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (policy.tipo_moneda_poliza === 'DÓLAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (policy.tipo_moneda_poliza === 'EUROS') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            }
            if (policy.tipo_moneda_poliza === 'BOLÍVAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: 'Bs ',
                    });
                });
            } else if (policy.tipo_moneda_poliza === 'DÓLAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '$ ',
                    });
                });
            } else if (policy.tipo_moneda_poliza === 'EUROS') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '€ ',
                    });
                });
            }
        }   
    </script>
<% } %>

</body>

</html>