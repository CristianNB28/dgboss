        <div class="footer">
            
        </div>
    </div>
</div>

<!-- Mainly scripts -->
<script src="/js/jquery-3.1.1.min.js"></script>
<script src="/js/jquery-2.1.1.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.js"></script>
<script src="/js/plugins/metisMenu/jquery.metisMenu.js"></script>
<script src="/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

<!-- Custom and plugin javascript -->
<script src="/js/inspinia.js"></script>
<script src="/js/plugins/pace/pace.min.js"></script>

<!-- Steps -->
<script src="/js/plugins/steps/jquery.steps.min.js"></script>

<!-- Jquery Validate -->
<script src="/js/plugins/validate/jquery.validate.min.js"></script>

<script src="/js/plugins/jquery.cookie/jquery.cookie.js"></script>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="/js/moment.js"></script>

<script src="/js/cleave-js/cleave.min.js"></script>

<script>
    var collectives = <%- JSON.stringify(collectives) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var collectiveNumber = <%- JSON.stringify(collective) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumColectivo(value, element, param) {
        let numberCollective = document.getElementById("numero_colectivo").value;
        const even = (collective) => collective.numero_colectivo === numberCollective;
        if (collectives.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value;
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumcolectivo", esRepetidoNumColectivo, "Se repite el número de colectivo");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-health-collective").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-health-collective .steps a:eq(0)').click();
                $('#form-health-collective').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${collectiveNumber.numero_colectivo} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-health-collective'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-health-collective").validate({
                rules: {
                    numero_colectivo: {
                        esrepetidonumcolectivo: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#extra-form-health-collective").validate();
        });
        $().ready(function () {
            $("#receipt-form-health-collective").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#receipt-form-health-collective").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var collectives = <%- JSON.stringify(collectives) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumColectivo(value, element, param) {
        let numberCollective = document.getElementById("numero_colectivo").value
        const even = (collective) => collective.numero_colectivo === numberCollective;
        if (collectives.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumcolectivo", esRepetidoNumColectivo, "Se repite el número de colectivo");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-vehicle-collective").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-vehicle-collective .steps a:eq(0)').click();
                $('#form-vehicle-collective').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${collectiveNumber.numero_colectivo} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-vehicle-collective'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-vehicle-collective").validate({
                rules: {
                    numero_colectivo: {
                        esrepetidonumcolectivo: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#extra-form-vehicle-collective").validate();
        });
        $().ready(function () {
            $("#receipt-form-vehicle-collective").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-vehicle-collective").on('keyup','.input-numeral2',function(){
            new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });   
        });
        $("#receipt-form-vehicle-collective").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var collectives = <%- JSON.stringify(collectives) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumColectivo(value, element, param) {
        let numberCollective = document.getElementById("numero_colectivo").value
        const even = (collective) => collective.numero_colectivo === numberCollective;
        if (collectives.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumcolectivo", esRepetidoNumColectivo, "Se repite el número de colectivo");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-risk-diverse").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-risk-diverse .steps a:eq(0)').click();
                $('#form-risk-diverse').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${collectiveNumber.numero_colectivo} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-risk-diverse-collective'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-risk-diverse").validate({
                rules: {
                    numero_colectivo: {
                        esrepetidonumcolectivo: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#extra-form-risk-diverse").validate();
        });
        $().ready(function () {
            $("#receipt-form-risk-diverse").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-risk-diverse").on('keyup','.input-numeral2',function(){
            new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });   
        });
        $("#receipt-form-risk-diverse").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<% if(typeof alert != 'undefined') { %>
    <script>
        Swal.fire({
            title: '<%= alertTitle %>',
            text: '<%= alertMessage %>',
            icon: '<%= alertIcon %>',
            showConfirmButton: <%= showConfirmButton %>,
            timer: <%= timer %>
        }).then(()=>{
            window.location='/<%= ruta %>'
        })
    </script>
<% } %>

<!-- Poliza de Colectivo Salud -->
<script>
    function storeValuesPolicyHealth() {
        let formDataPolicyHealth = [];
        localStorage.removeItem('formDataPolicyHealth');
        $('#policy-form-health-collective input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health-collective input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health-collective input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health-collective input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health-collective #fraccionamiento_boolean_colectivo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyHealth", JSON.stringify(formDataPolicyHealth));
    }
    function getPolicyHealth() {
        if(localStorage.formDataPolicyHealth !== undefined){
            const formDataPolicyHealth = JSON.parse(localStorage.formDataPolicyHealth);
            for (var i = 0; i < formDataPolicyHealth.length; i++) {
                $(`#policy-form-health-collective [name=${formDataPolicyHealth[i].name}]`).val(formDataPolicyHealth[i].value);
                if ((formDataPolicyHealth[i].name === 'fraccionamiento_boolean_colectivo') && (formDataPolicyHealth[i].value === true)) {
                    $('#policy-form-health-collective #fraccionamiento_boolean_colectivo').prop('checked', formDataPolicyHealth[i].value);
                    $('#policy-form-health-collective #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyHealth[i].name === 'maternidad_colectivo') && (formDataPolicyHealth[i].value === 'SÍ')) {
                    $('#policy-form-health-collective #searchinput').css('display', 'block');
                }
                if ((formDataPolicyHealth[i].name === 'plazo_espera_colectivo') && (formDataPolicyHealth[i].value === 'SÍ')) {
                    $('#policy-form-health-collective #searchinput2').css('display', 'block');
                }
                if ((formDataPolicyHealth[i].name === 'tipo_canal_colectivo') && (formDataPolicyHealth[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-health-collective #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyHealthList() {
        if(localStorage.formDataPolicyHealth !== undefined){
            const formDataPolicyHealth = JSON.parse(localStorage.formDataPolicyHealth);
            const lengthPolicyHealth = Math.trunc(formDataPolicyHealth.length / 2);
            const listHealthElement1 = $("#list-health-collective1");
            const listHealthElement2 = $("#list-health-collective2");
            for (let i = 0; i < lengthPolicyHealth; i++) {
                listHealthElement1.append(`<li class="list-group-item">${formDataPolicyHealth[i].label}: ${formDataPolicyHealth[i].value}</li>`);
            }
            for (let i = lengthPolicyHealth; i < formDataPolicyHealth.length; i++) {
                listHealthElement2.append(`<li class="list-group-item">${formDataPolicyHealth[i].label}: ${formDataPolicyHealth[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraHealth() {
        let formDataExtraHealth = [];
        localStorage.removeItem('formDataExtraHealth');
        $('#extra-form-health-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-10').siblings('.col-form-label').text();
            formDataExtraHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataExtraHealth", JSON.stringify(formDataExtraHealth));
    }
    function getExtraHealth() {
        if(localStorage.formDataExtraHealth !== undefined){
            const formDataExtraHealth = JSON.parse(localStorage.formDataExtraHealth);
            for (var i = 0; i < formDataExtraHealth.length; i++) {
                $(`#extra-form-health-collective [name=${formDataExtraHealth[i].name}]`).val(formDataExtraHealth[i].value);
            }
        }
    }
    function getExtraHealthList() {
        if(localStorage.formDataExtraHealth !== undefined){
            const formDataExtraHealth = JSON.parse(localStorage.formDataExtraHealth);
            const listExtraHealthElement = $("#list-health-extra");
            for (let i = 0; i < formDataExtraHealth.length; i++) {
                listExtraHealthElement.append(`<li class="list-group-item">${formDataExtraHealth[i].label}: ${formDataExtraHealth[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptHealth() {
        let formDataReceiptHealth = [];
        localStorage.removeItem('formDataReceiptHealth');
        $('#receipt-form-health-collective input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health-collective input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health-collective input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptHealth", JSON.stringify(formDataReceiptHealth));
    }
    function getReceiptHealth() {
        if(localStorage.formDataReceiptHealth !== undefined){
            const formDataReceiptHealth = JSON.parse(localStorage.formDataReceiptHealth);
            for (var i = 0; i < formDataReceiptHealth.length; i++) {
                $(`#receipt-form-health-collective [name=${formDataReceiptHealth[i].name}]`).val(formDataReceiptHealth[i].value);
            }
        }
    }
    function getReceiptHealthList() {
        if(localStorage.formDataReceiptHealth !== undefined){
            const formDataReceiptHealth = JSON.parse(localStorage.formDataReceiptHealth);
            const lengthReceiptHealth = Math.trunc(formDataReceiptHealth.length / 2);
            const listReceiptHealthElement1 = $("#list-health-receipt1");
            const listReceiptHealthElement2 = $("#list-health-receipt2");
            for (let i = 0; i < lengthReceiptHealth; i++) {
                listReceiptHealthElement1.append(`<li class="list-group-item">${formDataReceiptHealth[i].label}: ${formDataReceiptHealth[i].value}</li>`);
            }
            for (let i = lengthReceiptHealth; i < formDataReceiptHealth.length; i++) {
                listReceiptHealthElement2.append(`<li class="list-group-item">${formDataReceiptHealth[i].label}: ${formDataReceiptHealth[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Colectivo Vehiculo -->
<script>
    function storeValuesPolicyVehicle() {
        let formDataPolicyVehicle = [];
        localStorage.removeItem('formDataPolicyVehicle');
        $('#policy-form-vehicle-collective input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle-collective input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle-collective input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle-collective input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle-collective #tomador_asegurado_colectivo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-vehicle-collective #fraccionamiento_boolean_colectivo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyVehicle", JSON.stringify(formDataPolicyVehicle));
    }
    function getPolicyVehicle() {
        if(localStorage.formDataPolicyVehicle !== undefined){
            const formDataPolicyVehicle = JSON.parse(localStorage.formDataPolicyVehicle);
            for (var i = 0; i < formDataPolicyVehicle.length; i++) {
                $(`#policy-form-vehicle-collective [name=${formDataPolicyVehicle[i].name}]`).val(formDataPolicyVehicle[i].value);
                if ((formDataPolicyVehicle[i].name === 'tomador_asegurado_colectivo') && (formDataPolicyVehicle[i].value === true)) {
                    $('#policy-form-vehicle-collective #tomador_asegurado_colectivo').prop('checked', formDataPolicyVehicle[i].value);
                }
                if ((formDataPolicyVehicle[i].name === 'fraccionamiento_boolean_colectivo') && (formDataPolicyVehicle[i].value === true)) {
                    $('#policy-form-vehicle-collective #fraccionamiento_boolean_colectivo').prop('checked', formDataPolicyVehicle[i].value);
                    $('#policy-form-vehicle-collective #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyVehicle[i].name === 'tipo_canal_colectivo') && (formDataPolicyVehicle[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-vehicle-collective #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyVehicleList() {
        if(localStorage.formDataPolicyVehicle !== undefined){
            const formDataPolicyVehicle = JSON.parse(localStorage.formDataPolicyVehicle);
            const lengthPolicyVehicle = Math.trunc(formDataPolicyVehicle.length / 2);
            const listVehicleElement1 = $("#list-vehicle-collective1");
            const listVehicleElement2 = $("#list-vehicle-collective2");
            for (let i = 0; i < lengthPolicyVehicle; i++) {
                listVehicleElement1.append(`<li class="list-group-item">${formDataPolicyVehicle[i].label}: ${formDataPolicyVehicle[i].value}</li>`);
            }
            for (let i = lengthPolicyVehicle; i < formDataPolicyVehicle.length; i++) {
                listVehicleElement2.append(`<li class="list-group-item">${formDataPolicyVehicle[i].label}: ${formDataPolicyVehicle[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraVehicle() {
        let formDataExtraVehicle = [];
        localStorage.removeItem('formDataExtraVehicle');
        $('#extra-form-vehicle-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-10').siblings('.col-form-label').text();
            formDataExtraVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataExtraVehicle", JSON.stringify(formDataExtraVehicle));
    }
    function getExtraVehicle() {
        if(localStorage.formDataExtraVehicle !== undefined){
            const formDataExtraVehicle = JSON.parse(localStorage.formDataExtraVehicle);
            for (var i = 0; i < formDataExtraVehicle.length; i++) {
                $(`#extra-form-vehicle-collective [name=${formDataExtraVehicle[i].name}]`).val(formDataExtraVehicle[i].value);
            }
        }
    }
    function getExtraVehicleList() {
        if(localStorage.formDataExtraVehicle !== undefined){
            const formDataExtraVehicle = JSON.parse(localStorage.formDataExtraVehicle);
            const listExtraVehicleElement = $("#list-vehicle-extra");
            for (let i = 0; i < formDataExtraVehicle.length; i++) {
                listExtraVehicleElement.append(`<li class="list-group-item">${formDataExtraVehicle[i].label}: ${formDataExtraVehicle[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptVehicle() {
        let formDataReceiptVehicle = [];
        localStorage.removeItem('formDataReceiptVehicle');
        $('#receipt-form-vehicle-collective input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle-collective input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle-collective input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle-collective select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptVehicle", JSON.stringify(formDataReceiptVehicle));
    }
    function getReceiptVehicle() {
        if(localStorage.formDataReceiptVehicle !== undefined){
            const formDataReceiptVehicle = JSON.parse(localStorage.formDataReceiptVehicle);
            for (var i = 0; i < formDataReceiptVehicle.length; i++) {
                $(`#receipt-form-vehicle-collective [name=${formDataReceiptVehicle[i].name}]`).val(formDataReceiptVehicle[i].value);
            }
        }
    }
    function getReceiptVehicleList() {
        if(localStorage.formDataReceiptVehicle !== undefined){
            const formDataReceiptVehicle = JSON.parse(localStorage.formDataReceiptVehicle);
            const lengthReceiptVehicle = Math.trunc(formDataReceiptVehicle.length / 2);
            const listReceiptVehicleElement1 = $("#list-vehicle-receipt1");
            const listReceiptVehicleElement2 = $("#list-vehicle-receipt2");
            for (let i = 0; i < lengthReceiptVehicle; i++) {
                listReceiptVehicleElement1.append(`<li class="list-group-item">${formDataReceiptVehicle[i].label}: ${formDataReceiptVehicle[i].value}</li>`);
            }
            for (let i = lengthReceiptVehicle; i < formDataReceiptVehicle.length; i++) {
                listReceiptVehicleElement2.append(`<li class="list-group-item">${formDataReceiptVehicle[i].label}: ${formDataReceiptVehicle[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Colectivo Riesgos Diversos -->
<script>
    function storeValuesPolicyRiskDiverse() {
        let formDataPolicyRiskDiverse = [];
        localStorage.removeItem('formDataPolicyRiskDiverse');
        $('#policy-form-risk-diverse input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-risk-diverse input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-risk-diverse input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-risk-diverse input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-risk-diverse select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-risk-diverse #tomador_asegurado_colectivo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-risk-diverse #fraccionamiento_boolean_colectivo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyRiskDiverse.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyRiskDiverse", JSON.stringify(formDataPolicyRiskDiverse));
    }
    function getPolicyRiskDiverse() {
        if(localStorage.formDataPolicyRiskDiverse !== undefined){
            const formDataPolicyRiskDiverse = JSON.parse(localStorage.formDataPolicyRiskDiverse);
            for (var i = 0; i < formDataPolicyRiskDiverse.length; i++) {
                $(`#policy-form-risk-diverse [name=${formDataPolicyRiskDiverse[i].name}]`).val(formDataPolicyRiskDiverse[i].value);
                if ((formDataPolicyRiskDiverse[i].name === 'tomador_asegurado_colectivo') && (formDataPolicyRiskDiverse[i].value === true)) {
                    $('#policy-form-risk-diverse #tomador_asegurado_colectivo').prop('checked', formDataPolicyRiskDiverse[i].value);
                }
                if ((formDataPolicyRiskDiverse[i].name === 'fraccionamiento_boolean_colectivo') && (formDataPolicyRiskDiverse[i].value === true)) {
                    $('#policy-form-risk-diverse #fraccionamiento_boolean_colectivo').prop('checked', formDataPolicyRiskDiverse[i].value);
                    $('#policy-form-risk-diverse #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyRiskDiverse[i].name === 'tipo_canal_colectivo') && (formDataPolicyRiskDiverse[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-risk-diverse #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyRiskDiverseList() {
        if(localStorage.formDataPolicyRiskDiverse !== undefined){
            const formDataPolicyRiskDiverse = JSON.parse(localStorage.formDataPolicyRiskDiverse);
            const lengthPolicyRiskDiverse = Math.trunc(formDataPolicyRiskDiverse.length / 2);
            const listRiskDiverseElement1 = $("#list-risk-diverse-collective1");
            const listRiskDiverseElement2 = $("#list-risk-diverse-collective2");
            for (let i = 0; i < lengthPolicyRiskDiverse; i++) {
                listRiskDiverseElement1.append(`<li class="list-group-item">${formDataPolicyRiskDiverse[i].label}: ${formDataPolicyRiskDiverse[i].value}</li>`);
            }
            for (let i = lengthPolicyRiskDiverse; i < formDataPolicyRiskDiverse.length; i++) {
                listRiskDiverseElement2.append(`<li class="list-group-item">${formDataPolicyRiskDiverse[i].label}: ${formDataPolicyRiskDiverse[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraRiskDiverse() {
        let formDataExtraRiskDiverse = [];
        localStorage.removeItem('formDataExtraRiskDiverse');
        $('#extra-form-risk-diverse select').each(function(){
            const labelName = $(this).closest('.col-sm-10').siblings('.col-form-label').text();
            formDataExtraRiskDiverse.push({ label: labelName, name: this.name, value: this.value});
        });
        localStorage.setItem("formDataExtraRiskDiverse", JSON.stringify(formDataExtraRiskDiverse));
    }
    function getExtraRiskDiverse() {
        if(localStorage.formDataExtraRiskDiverse !== undefined){
            const formDataExtraRiskDiverse = JSON.parse(localStorage.formDataExtraRiskDiverse);
            for (var i = 0; i < formDataExtraRiskDiverse.length; i++) {
                $(`#extra-form-risk-diverse [name=${formDataExtraRiskDiverse[i].name}]`).val(formDataExtraRiskDiverse[i].value);
            }
        }
    }
    function getExtraRiskDiverseList() {
        if(localStorage.formDataExtraRiskDiverse !== undefined){
            const formDataExtraRiskDiverse = JSON.parse(localStorage.formDataExtraRiskDiverse);
            const listExtraRiskDiverseElement = $("#list-risk-diverse-extra");
            for (let i = 0; i < formDataExtraRiskDiverse.length; i++) {
                listExtraRiskDiverseElement.append(`<li class="list-group-item">${formDataExtraRiskDiverse[i].label}: ${formDataExtraRiskDiverse[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptRiskDiverse() {
        let formDataReceiptRiskDiverse = [];
        localStorage.removeItem('formDataReceiptRiskDiverse');
        $('#receipt-form-risk-diverse input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-risk-diverse input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-risk-diverse input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-risk-diverse select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptRiskDiverse.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptRiskDiverse", JSON.stringify(formDataReceiptRiskDiverse));
    }
    function getReceiptRiskDiverse() {
        if(localStorage.formDataReceiptRiskDiverse !== undefined){
            const formDataReceiptRiskDiverse = JSON.parse(localStorage.formDataReceiptRiskDiverse);
            for (var i = 0; i < formDataReceiptRiskDiverse.length; i++) {
                $(`#receipt-form-risk-diverse [name=${formDataReceiptRiskDiverse[i].name}]`).val(formDataReceiptRiskDiverse[i].value);
            }
        }
    }
    function getReceiptRiskDiverseList() {
        if(localStorage.formDataReceiptRiskDiverse !== undefined){
            const formDataReceiptRiskDiverse = JSON.parse(localStorage.formDataReceiptRiskDiverse);
            const lengthReceiptRiskDiverse = Math.trunc(formDataReceiptRiskDiverse.length / 2);
            const listReceiptRiskDiverseElement1 = $("#list-risk-diverse-receipt1");
            const listReceiptRiskDiverseElement2 = $("#list-risk-diverse-receipt2");
            for (let i = 0; i < lengthReceiptRiskDiverse; i++) {
                listReceiptRiskDiverseElement1.append(`<li class="list-group-item">${formDataReceiptRiskDiverse[i].label}: ${formDataReceiptRiskDiverse[i].value}</li>`);
            }
            for (let i = lengthReceiptRiskDiverse; i < formDataReceiptRiskDiverse.length; i++) {
                listReceiptRiskDiverseElement2.append(`<li class="list-group-item">${formDataReceiptRiskDiverse[i].label}: ${formDataReceiptRiskDiverse[i].value}</li>`);
            }
        }
    }
</script>

<script>
    $(document).ready(function () {        
        // Poliza Colectivo Salud
        $("#btn_health_policy_collective").on('click', function (event) {
            storeValuesPolicyHealth();
        });
        $("#btn_health_extra_collective").on('click', function (event) {
            storeValuesExtraHealth();
        });
        $("#btn_health_receipt_collective").on('click', function (event) {
            storeValuesReceiptHealth();
        });

        $("#btn_health_collective_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyHealth();
        getPolicyHealthList();
        getExtraHealth();
        getExtraHealthList();
        getReceiptHealth();
        getReceiptHealthList();

        // Poliza Colectivo Vehiculo
        $("#btn_vehicle_policy_collective").on('click', function (event) {
            storeValuesPolicyVehicle();
        });
        $("#btn_vehicle_extra_collective").on('click', function (event) {
            storeValuesExtraVehicle();
        });
        $("#btn_vehicle_receipt_collective").on('click', function (event) {
            storeValuesReceiptVehicle();
        });

        $("#btn_vehicle_collective_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyVehicle();
        getPolicyVehicleList();
        getExtraVehicle();
        getExtraVehicleList();
        getReceiptVehicle();
        getReceiptVehicleList();

        // Poliza Colectivo Riesgos Diversos
        $("#btn_risk_diverse_policy").on('click', function (event) {
            storeValuesPolicyRiskDiverse();
        });
        $("#btn_risk_diverse_extra").on('click', function (event) {
            storeValuesExtraRiskDiverse();
        });
        $("#btn_risk_diverse_receipt").on('click', function (event) {
            storeValuesReceiptRiskDiverse();
        });

        $("#btn_risk_diverse_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyRiskDiverse();
        getPolicyRiskDiverseList();
        getExtraRiskDiverse();
        getExtraRiskDiverseList();
        getReceiptRiskDiverse();
        getReceiptRiskDiverseList();

        $('.custom-file-input').on('change', function() {
            let fileName = $(this).val().split('\\').pop();
            $(this).next('.custom-file-label').addClass("selected").html(fileName);
        });

        if ($('#tipo_canal_colectivo').val() === 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        }

        if ($('#fraccionamiento_boolean_colectivo').prop('checked') === true) {
            document.getElementById("active-select-1").style.display = "inline";
        }

        $('#fecha_desde_colectivo').change(function () {
            var extraer = $('#fecha_desde_colectivo').val();
            extraer = extraer.split('-');
            year = parseInt(extraer[0]);
            month = parseInt(extraer[1]) - 1;
            day = parseInt(extraer[2]);
            var fecha = moment([year, month, day]).add(1, 'years');
            fecha = fecha.toISOString().substring(0, 10);
            $('#fecha_hasta_colectivo').val(fecha);
        });

        if (($('#select_box').val() === 'V') || ($('#select_box').val() === 'E')) {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });
        } else {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: '!',
                delimiter: '',
                stripLeadingZeroes: false
            });
        }

        $('#select_box').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            }
        });
        
        $('#select_box2').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            }
        });

        if ($('#maternidad_colectivo').val() === 'SÍ') {
            document.getElementById("searchinput").style.display = "block";
        }
        if ($('#plazo_espera_colectivo').val() === 'SÍ') {
            document.getElementById("searchinput2").style.display = "block";
        }
    });
</script>

<script>
    window.addEventListener("load", function() {
        document.getElementById("radioContainer").addEventListener("click", function() {
            document.getElementById("active-select-1").style.display = document.getElementById("fraccionamiento_boolean_colectivo").checked ? "inline" : "none";
        });
    });
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreTomador() {
        var idRif = document.getElementById("id_rif_tomador").value;
        var selectBox = document.getElementById("select_box").value;
        var checkboxTomadorViejo = document.getElementById("tomador_asegurado_colectivo").checked;
        if ((selectBox === 'J') || (selectBox === 'G') || (selectBox === 'I') || (selectBox === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_tomador").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_tomador_colectivo").value = elementLegalInsured.razon_social_per_jur;
                    if (checkboxTomadorViejo === true) {
                        document.getElementById("select_box2").value = elementLegalInsured.tipo_rif_asegurado_per_jur;
                        document.getElementById("id_rif_asegurado").value = elementLegalInsured.rif_asegurado_per_jur;
                        document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                        document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    } else {
                        document.getElementById("select_box2").value = 'V';
                        document.getElementById("id_rif_asegurado").value = ''
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                    break;
                } else {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_colectivo").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_tomador").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_tomador_colectivo").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        if (checkboxTomadorViejo === true) {
                            document.getElementById("select_box2").value = elementNaturalInsured.tipo_cedula_asegurado_per_nat;
                            document.getElementById("id_rif_asegurado").value = elementNaturalInsured.cedula_asegurado_per_nat;
                            document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                            document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        } else {
                            document.getElementById("select_box2").value = 'V';
                            document.getElementById("id_rif_asegurado").value = ''
                            document.getElementById("correo_asegurado").value = '';
                            document.getElementById("nombre_asegurado").value = '';
                        }
                        break;
                    } else {
                        document.getElementById("correo_tomador").value = '';
                        document.getElementById("nombre_tomador_colectivo").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_colectivo").value = '';
                }
            }
        }
    }
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreAsegurado() {
        var idRif = document.getElementById("id_rif_asegurado").value;
        var selectBox2 = document.getElementById("select_box2").value;
        if ((selectBox2 === 'J') || (selectBox2 === 'G') || (selectBox2 === 'I') || (selectBox2 === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox2 === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    break;
                } else {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox2 === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        break;
                    } else {
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        }
    }
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreTomador2() {
        var idRif = document.getElementById("id_rif_tomador").value;
        var selectBox = document.getElementById("select_box").value;
        if ((selectBox === 'J') || (selectBox === 'G') || (selectBox === 'I') || (selectBox === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_tomador").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_tomador_colectivo").value = elementLegalInsured.razon_social_per_jur;
                    break;
                } else {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_colectivo").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_tomador").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_tomador_colectivo").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        break;
                    } else {
                        document.getElementById("correo_tomador").value = '';
                        document.getElementById("nombre_tomador_colectivo").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_colectivo").value = '';
                }
            }
        }
    }
</script>

<script>
    function showInput() {
        var getSelectValue = document.getElementById("maternidad_colectivo").value;
        if (getSelectValue === 'SÍ') {
            document.getElementById("searchinput").style.display = "block";
        } else if (getSelectValue === 'NO') {
            document.getElementById("cobertura_suma_asegurada_colectivo").value = '';
            document.getElementById("searchinput").style.display = "none";
        }
    }   
</script>

<script>
    function showInput2() {
        var getSelectValue = document.getElementById("plazo_espera_colectivo").value;
        if (getSelectValue === 'SÍ') {
            document.getElementById("searchinput2").style.display = "block";
        } else if (getSelectValue === 'NO') {
            document.getElementById("detalle_cliente_colectivo").value = '';
            document.getElementById("searchinput2").style.display = "none";
        }
    }   
</script>

<script>
    function showList() {
        var getSelectValue = document.getElementById("tipo_canal_colectivo").value;
        if (getSelectValue === 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        } else {
            document.getElementById("nombre_agentes_propios").value = '';
            document.getElementById("searchList").style.display = "none";
        }
    }   
</script>

<script>
    function currencySignChange() {
        let coinType = document.getElementById("tipo_moneda_colectivo").value;
        if (coinType === 'BOLÍVAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
            });
        } else if (coinType === 'DÓLAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
            });
        } else if (coinType === 'EUROS') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
            });
        }
    }   
</script>

<script>
    function premiumCalculationDate() {
        var getSelectValue = document.getElementById("tipo_fraccionamiento_colectivo").value;
        var checkboxDivision = document.getElementById("fraccionamiento_boolean_colectivo").checked;
        if (getSelectValue === 'MENSUAL') {
            document.getElementById("numero_pago_colectivo").value = '';
        } else if (getSelectValue === 'BIMESTRAL') {
            document.getElementById("numero_pago_colectivo").value = 6;
        } else if (getSelectValue === 'TRIMESTRAL') {
            document.getElementById("numero_pago_colectivo").value = 4;
        } else if (getSelectValue === 'SEMESTRAL') {
            document.getElementById("numero_pago_colectivo").value = 2;
        }  else if (getSelectValue === 'ANUAL') {
            document.getElementById("numero_pago_colectivo").value = 1;
        }
        if (checkboxDivision === false) {
            document.getElementById("numero_pago_colectivo").value = 0;
            document.getElementById("tipo_fraccionamiento_colectivo").value = '';
        }
    }
</script>

<script>
    function premiumCalculation() {
        let netPremium = document.getElementById("prima_neta_colectivo").value;
        let coinType = document.getElementById("tipo_moneda_colectivo").value;
        netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
        if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
            netPremium = netPremium.replaceAll(".", "");
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        } else if (netPremium.indexOf(',') !== -1) {
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium);
        } else if (netPremium.indexOf('.') !== -1) {
            netPremium = netPremium.replaceAll(".", ",");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        }
        let igtf = Number(netPremium) * 0.03;
        let totalPremium = Number(netPremium) + Number(igtf);
        igtf = igtf.toFixed(2);
        totalPremium = totalPremium.toFixed(2);
        if (coinType === 'BOLÍVAR') {
            const cleaveIgtf = new Cleave("#igtf_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'DÓLAR') {
            const cleaveIgtf = new Cleave("#igtf_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'EUROS') {
            const cleaveIgtf = new Cleave("#igtf_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_colectivo", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        }
    }
</script>

<% if (Object.keys(collective).length !== 0) { %>
    <script>
        var collective = <%- JSON.stringify(collective) %>;
        function dateAutomation() {
            if (collective.tipo_fraccionamiento_colectivo === 'MENSUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (collective.tipo_fraccionamiento_colectivo === 'BIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(2, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (collective.tipo_fraccionamiento_colectivo === 'TRIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(3, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (collective.tipo_fraccionamiento_colectivo === 'SEMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(6, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }  else if (collective.tipo_fraccionamiento_colectivo === 'ANUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'years');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }
        }
    </script>

    <script>
        var collective = <%- JSON.stringify(collective) %>;
        window.onload = function() {
            let netPremium = document.getElementById("prima_neta_recibo").value;
            netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
            if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
                netPremium = netPremium.replaceAll(".", "");
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            } else if (netPremium.indexOf(',') !== -1) {
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium);
            } else if (netPremium.indexOf('.') !== -1) {
                netPremium = netPremium.replaceAll(".", ",");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            }
            let igtf = Number(netPremium) * 0.03;
            let totalPremium = Number(netPremium) + Number(igtf);
            igtf = igtf.toFixed(2);
            totalPremium = totalPremium.toFixed(2);
            if (collective.tipo_moneda_colectivo === 'BOLÍVAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (collective.tipo_moneda_colectivo === 'DÓLAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (collective.tipo_moneda_colectivo === 'EUROS') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            }
            if (collective.tipo_moneda_colectivo === 'BOLÍVAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: 'Bs ',
                    });
                });
            } else if (collective.tipo_moneda_colectivo === 'DÓLAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '$ ',
                    });
                });
            } else if (collective.tipo_moneda_colectivo === 'EUROS') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '€ ',
                    });
                });
            }
        }   
    </script>
<% } %>

</body>

</html>