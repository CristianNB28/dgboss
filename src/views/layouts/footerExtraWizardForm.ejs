        <div class="footer">
            
        </div>
    </div>
</div>

<!-- Mainly scripts -->
<script src="/js/jquery-3.1.1.min.js"></script>
<script src="/js/jquery-2.1.1.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.js"></script>
<script src="/js/plugins/metisMenu/jquery.metisMenu.js"></script>
<script src="/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

<!-- Custom and plugin javascript -->
<script src="/js/inspinia.js"></script>
<script src="/js/plugins/pace/pace.min.js"></script>

<!-- Steps -->
<script src="/js/plugins/steps/jquery.steps.min.js"></script>

<!-- Jquery Validate -->
<script src="/js/plugins/validate/jquery.validate.min.js"></script>

<!-- DataTables -->
<script src="/js/plugins/dataTables/datatables.min.js"></script>
<script src="/js/plugins/dataTables/dataTables.bootstrap4.min.js"></script>

<script src="/js/plugins/jquery.cookie/jquery.cookie.js"></script>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="/js/moment.js"></script>

<script src="/js/cleave-js/cleave.min.js"></script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value;
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value;
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-health-policy").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-health-policy .steps a:eq(0)').click();
                $('#form-health-policy').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-health-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-health").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#extra-form-health").validate();
        });
        $().ready(function () {
            $("#receipt-form-health").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#extra-form-health").on('keyup','.input-numeral-cedula',function(){
            new Cleave('.input-numeral-cedula', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.'
            });    
        });
        $("#receipt-form-health").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-vehicle-policy").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-vehicle-policy .steps a:eq(0)').click();
                $('#form-vehicle-policy').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-vehicle-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-vehicle").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $('#extra-form-vehicle').validate();
        })
        $().ready(function () {
            $("#receipt-form-vehicle").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#policy-form-vehicle").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
        $("#extra-form-vehicle").on('keyup','.number_format',function(){
            var separador = $(this);
            for (var i = 0 ; i < separador.length; i++) {
                separador[i].addEventListener('input', (e) => {
                    var entrada = e.target.value.split(','),
                    parteEntera = entrada[0].replace(/\./g, ''),
                    parteDecimal = entrada[1],
                    salida = parteEntera.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.");
                    e.target.value = salida + (parteDecimal !== undefined ? ',' + parteDecimal.replace(/([0-9])([0-9]{2})$/,'') : '');
                }, false); 
            }    
        });
        $("#extra-form-vehicle").on('keyup','.input-numeral-cedula',function(){
            new Cleave('.input-numeral-cedula', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.'
            });    
        });
        $("#receipt-form-vehicle").on('keyup','.porcentaje_tasa',function(){
            $('.porcentaje_tasa').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '%',
                    tailPrefix: true
                });
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-funeral").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-funeral .steps a:eq(0)').click();
                $('#form-funeral').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-funeral-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-funeral").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $("#extra-form-funeral").validate();
        });
        $().ready(function () {
            $("#receipt-form-funeral").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#extra-form-funeral").on('keyup','.input-numeral-cedula',function(){
            new Cleave('.input-numeral-cedula', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.'
            });    
        });
        $("#receipt-form-funeral").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<script>
    var policies = <%- JSON.stringify(policies) %>;
    var receipts = <%- JSON.stringify(receipts) %>;
    var policyNumber = <%- JSON.stringify(policy) %>;
    $.extend($.validator.messages, {
        required: "Este campo es obligatorio",
        remote: "Por favor, rellena este campo",
        email: "Por favor, escribe una dirección de correo válida",
        url: "Por favor, escribe una URL válida",
        date: "Por favor, escribe una fecha válida",
        dateISO: "Por favor, escribe una fecha (ISO) válida",
        number: "Por favor, escribe un número entero válido",
        digits: "Por favor, escribe sólo dígitos",
        creditcard: "Por favor, escribe un número de tarjeta válido",
        equalTo: "Por favor, escribe el mismo valor de nuevo",
        accept: "Por favor, escribe un valor con una extensión aceptada",
        maxlength: $.validator.format("Por favor, no escribas más de {0} caracteres"),
        minlength: $.validator.format("Por favor, no escribas menos de {0} caracteres"),
        rangelength: $.validator.format("Por favor, escribe un valor entre {0} y {1} caracteres"),
        range: $.validator.format("Por favor, escribe un valor entre {0} y {1}"),
        max: $.validator.format("Por favor, escribe un valor menor o igual a {0}"),
        min: $.validator.format("Por favor, escribe un valor mayor o igual a {0}"),
        step: $.validator.format("Por favor, escribe un múltiplo de {0}")
    });
    function esRepetidoNumPoliza(value, element, param) {
        let numberPolicy = document.getElementById("numero_poliza").value
        const even = (policy) => policy.numero_poliza === numberPolicy;
        if (policies.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    function esRepetidoNumRecibo(value, element, param) {
        let numberReceipt = document.getElementById("numero_recibo").value
        const even = (receipt) => receipt.numero_recibo === numberReceipt;
        if (receipts.some(even) === true) {
            return false;
        } else {
            return true;
        }
    }
    $.validator.addMethod("esrepetidonumpoliza", esRepetidoNumPoliza, "Se repite el número de póliza");
    $.validator.addMethod("esrepetidonumrecibo", esRepetidoNumRecibo, "Se repite el número de recibo");
    $(document).ready(function(){
        $("#wizard").steps();
        $("#form-life").steps({
            headerTag: "h1",
            bodyTag: "fieldset",
            titleTemplate:"<span class='text'></span> #title#",
            saveState: true,
            labels: {
                cancel: "Cancelar",
                current: "current step:",
                pagination: "Pagination",
                finish: "Cerrar",
                next: "Siguiente",
                previous: "Anterior",
                loading: "Cargando ..."
            },
            onStepChanging: (event, currentIndex, newIndex) => {
                if (currentIndex > newIndex)
                {
                    return true;
                }
                if (newIndex === 3)
                {
                    return false;
                }
                if (newIndex === 1) {
                    return true;
                } else if (newIndex === 2) {
                    return true;
                }
            },
            onFinishing:(event, currentIndex) => {
                return true;
            },
            onFinished: (a) => {
                $('#form-life .steps a:eq(0)').click();
                $('#form-life').hide();
                Swal.fire({
                    title: 'Exitoso',
                    icon: 'success',
                    html: `Se ha cargado con éxito la póliza <b> ${policyNumber.numero_poliza} </b>`,
                    showConfirmButton: false,
                    timer: 2000
                }).then(()=>{
                    window.location='/sistema/list-life-policy'
                });
            }
        });
        $().ready(function () {
            $("#policy-form-life").validate({
                rules: {
                    numero_poliza: {
                        esrepetidonumpoliza: true
                    }
                }
            });
        });
        $().ready(function () {
            $('#extra-form-life').validate();
        });
        $().ready(function () {
            $("#receipt-form-life").validate({
                rules: {
                    numero_recibo: {
                        esrepetidonumrecibo: true
                    }
                }
            });
        });
        $("#extra-form-life").on('keyup','.input-numeral-cedula',function(){
            new Cleave('.input-numeral-cedula', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.'
            });    
        });
        $("#receipt-form-life").on('keyup','.porcentaje_tasa',function(){
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });    
        });
    });
</script>

<% if(typeof alert != 'undefined') { %>
    <script>
        Swal.fire({
            title: '<%= alertTitle %>',
            text: '<%= alertMessage %>',
            icon: '<%= alertIcon %>',
            showConfirmButton: <%= showConfirmButton %>,
            timer: <%= timer %>
        }).then(()=>{
            window.location='/<%= ruta %>'
        })
    </script>
<% } %>

<!-- Poliza de Salud -->
<script>
    function storeValuesPolicyHealth() {
        let formDataPolicyHealth = [];
        localStorage.removeItem('formDataPolicyHealth');
        $('#policy-form-health input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-health #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-health #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyHealth.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyHealth", JSON.stringify(formDataPolicyHealth));
    }
    function getPolicyHealth() {
        if(localStorage.formDataPolicyHealth !== undefined){
            const formDataPolicyHealth = JSON.parse(localStorage.formDataPolicyHealth);
            for (var i = 0; i < formDataPolicyHealth.length; i++) {
                $(`#policy-form-health [name=${formDataPolicyHealth[i].name}]`).val(formDataPolicyHealth[i].value);
                if ((formDataPolicyHealth[i].name === 'tomador_asegurado_poliza') && (formDataPolicyHealth[i].value === true)) {
                    $('#policy-form-health #tomador_asegurado_poliza').prop('checked', formDataPolicyHealth[i].value);
                }
                if ((formDataPolicyHealth[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyHealth[i].value === true)) {
                    $('#policy-form-health #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyHealth[i].value);
                    $('#policy-form-health #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyHealth[i].name === 'maternidad_poliza') && (formDataPolicyHealth[i].value === 'SÍ')) {
                    $('#policy-form-health #searchinput').css('display', 'block');
                }
                if ((formDataPolicyHealth[i].name === 'plazo_espera_poliza') && (formDataPolicyHealth[i].value === 'SÍ')) {
                    $('#policy-form-health #searchinput2').css('display', 'block');
                }
                if ((formDataPolicyHealth[i].name === 'tipo_canal_poliza') && (formDataPolicyHealth[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-health #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyHealthList() {
        if(localStorage.formDataPolicyHealth !== undefined){
            const formDataPolicyHealth = JSON.parse(localStorage.formDataPolicyHealth);
            const lengthPolicyHealth = Math.trunc(formDataPolicyHealth.length / 2);
            const listHealthElement1 = $("#list-health-policy1");
            const listHealthElement2 = $("#list-health-policy2");
            for (let i = 0; i < lengthPolicyHealth; i++) {
                listHealthElement1.append(`<li class="list-group-item">${formDataPolicyHealth[i].label}: ${formDataPolicyHealth[i].value}</li>`);
            }
            for (let i = lengthPolicyHealth; i < formDataPolicyHealth.length; i++) {
                listHealthElement2.append(`<li class="list-group-item">${formDataPolicyHealth[i].label}: ${formDataPolicyHealth[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraHealth() {
        let formDataExtraHealth = [];
        let recoveredData = localStorage.getItem("formDataExtraHealthCompleted");
        localStorage.removeItem('formDataExtraHealth');
        $('#extra-form-health input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-health input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-health select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataExtraHealth", JSON.stringify(formDataExtraHealth));
        if(recoveredData == null){
            localStorage.setItem("formDataExtraHealthCompleted", JSON.stringify(formDataExtraHealth));
        } else {
            let data = JSON.parse(recoveredData)
            $('#extra-form-health input[type=text]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-health input[type=date]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-health select').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            localStorage.setItem('formDataExtraHealthCompleted', JSON.stringify(data))
        }
    }
    function getExtraHealth() {
        if(localStorage.formDataExtraHealth !== undefined){
            const formDataExtraHealth = JSON.parse(localStorage.formDataExtraHealth);
            for (var i = 0; i < formDataExtraHealth.length; i++) {
                $(`#extra-form-health [name=${formDataExtraHealth[i].name}]`).val(formDataExtraHealth[i].value);
            }
        }
    }
    function getExtraHealthList() {
        if(localStorage.formDataExtraHealthCompleted !== undefined){
            const formDataExtraHealthCompleted = JSON.parse(localStorage.formDataExtraHealthCompleted);
            const lengthExtraHealth = Math.trunc(formDataExtraHealthCompleted.length / 2);
            const listExtraHealthElement1 = $("#list-health-extra1");
            const listExtraHealthElement2 = $("#list-health-extra2");
            for (let i = 0; i < lengthExtraHealth; i++) {
                listExtraHealthElement1.append(`<li class="list-group-item">${formDataExtraHealthCompleted[i].label}: ${formDataExtraHealthCompleted[i].value}</li>`);
            }
            for (let i = lengthExtraHealth; i < formDataExtraHealthCompleted.length; i++) {
                listExtraHealthElement2.append(`<li class="list-group-item">${formDataExtraHealthCompleted[i].label}: ${formDataExtraHealthCompleted[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptHealth() {
        let formDataReceiptHealth = [];
        localStorage.removeItem('formDataReceiptHealth');
        $('#receipt-form-health input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-health select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptHealth.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptHealth", JSON.stringify(formDataReceiptHealth));
    }
    function getReceiptHealth() {
        if(localStorage.formDataReceiptHealth !== undefined){
            const formDataReceiptHealth = JSON.parse(localStorage.formDataReceiptHealth);
            for (var i = 0; i < formDataReceiptHealth.length; i++) {
                $(`#receipt-form-health [name=${formDataReceiptHealth[i].name}]`).val(formDataReceiptHealth[i].value);
            }
        }
    }
    function getReceiptHealthList() {
        if(localStorage.formDataReceiptHealth !== undefined){
            const formDataReceiptHealth = JSON.parse(localStorage.formDataReceiptHealth);
            const lengthReceiptHealth = Math.trunc(formDataReceiptHealth.length / 2);
            const listReceiptHealthElement1 = $("#list-health-receipt1");
            const listReceiptHealthElement2 = $("#list-health-receipt2");
            for (let i = 0; i < lengthReceiptHealth; i++) {
                listReceiptHealthElement1.append(`<li class="list-group-item">${formDataReceiptHealth[i].label}: ${formDataReceiptHealth[i].value}</li>`);
            }
            for (let i = lengthReceiptHealth; i < formDataReceiptHealth.length; i++) {
                listReceiptHealthElement2.append(`<li class="list-group-item">${formDataReceiptHealth[i].label}: ${formDataReceiptHealth[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Vehiculo -->
<script>
    function storeValuesPolicyVehicle() {
        let formDataPolicyVehicle = [];
        localStorage.removeItem('formDataPolicyVehicle');
        $('#policy-form-vehicle input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-vehicle #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-vehicle #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyVehicle.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyVehicle", JSON.stringify(formDataPolicyVehicle));
    }
    function getPolicyVehicle() {
        if(localStorage.formDataPolicyVehicle !== undefined){
            const formDataPolicyVehicle = JSON.parse(localStorage.formDataPolicyVehicle);
            for (var i = 0; i < formDataPolicyVehicle.length; i++) {
                $(`#policy-form-vehicle [name=${formDataPolicyVehicle[i].name}]`).val(formDataPolicyVehicle[i].value);
                if ((formDataPolicyVehicle[i].name === 'tomador_asegurado_poliza') && (formDataPolicyVehicle[i].value === true)) {
                    $('#policy-form-vehicle #tomador_asegurado_poliza').prop('checked', formDataPolicyVehicle[i].value);
                }
                if ((formDataPolicyVehicle[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyVehicle[i].value === true)) {
                    $('#policy-form-vehicle #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyVehicle[i].value);
                    $('#policy-form-vehicle #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyVehicle[i].name === 'tipo_canal_poliza') && (formDataPolicyVehicle[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-vehicle #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyVehicleList() {
        if(localStorage.formDataPolicyVehicle !== undefined){
            const formDataPolicyVehicle = JSON.parse(localStorage.formDataPolicyVehicle);
            const lengthPolicyVehicle = Math.trunc(formDataPolicyVehicle.length / 2);
            const listVehicleElement1 = $("#list-vehicle-policy1");
            const listVehicleElement2 = $("#list-vehicle-policy2");
            for (let i = 0; i < lengthPolicyVehicle; i++) {
                listVehicleElement1.append(`<li class="list-group-item">${formDataPolicyVehicle[i].label}: ${formDataPolicyVehicle[i].value}</li>`);
            }
            for (let i = lengthPolicyVehicle; i < formDataPolicyVehicle.length; i++) {
                listVehicleElement2.append(`<li class="list-group-item">${formDataPolicyVehicle[i].label}: ${formDataPolicyVehicle[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraVehicle() {
        let formDataExtraVehicle = [];
        localStorage.removeItem('formDataExtraVehicle');
        $('#extra-form-vehicle input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-vehicle input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-vehicle select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-vehicle #blindaje_boolean_vehiculo').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataExtraVehicle.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataExtraVehicle", JSON.stringify(formDataExtraVehicle));
    }
    function getExtraVehicle() {
        if(localStorage.formDataExtraVehicle !== undefined){
            const formDataExtraVehicle = JSON.parse(localStorage.formDataExtraVehicle);
            for (var i = 0; i < formDataExtraVehicle.length; i++) {
                $(`#extra-form-vehicle [name=${formDataExtraVehicle[i].name}]`).val(formDataExtraVehicle[i].value);
                if ((formDataExtraVehicle[i].name === 'blindaje_boolean_vehiculo') && (formDataExtraVehicle[i].value === true)) {
                    $('#extra-form-vehicle #blindaje_boolean_vehiculo').prop('checked', formDataExtraVehicle[i].value);
                    $('#extra-form-vehicle #active-select-3').css('display', 'inline');
                    $('#extra-form-vehicle #active-select-4').css('display', 'inline');
                }
            }
        }
    }
    function getExtraVehicleList() {
        if(localStorage.formDataExtraVehicle !== undefined){
            const formDataExtraVehicle = JSON.parse(localStorage.formDataExtraVehicle);
            const lengthExtraVehicle = Math.trunc(formDataExtraVehicle.length / 2);
            const listExtraVehicleElement1 = $("#list-vehicle-extra1");
            const listExtraVehicleElement2 = $("#list-vehicle-extra2");
            for (let i = 0; i < lengthExtraVehicle; i++) {
                listExtraVehicleElement1.append(`<li class="list-group-item">${formDataExtraVehicle[i].label}: ${formDataExtraVehicle[i].value}</li>`);
            }
            for (let i = lengthExtraVehicle; i < formDataExtraVehicle.length; i++) {
                listExtraVehicleElement2.append(`<li class="list-group-item">${formDataExtraVehicle[i].label}: ${formDataExtraVehicle[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptVehicle() {
        let formDataReceiptVehicle = [];
        localStorage.removeItem('formDataReceiptVehicle');
        $('#receipt-form-vehicle input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-vehicle select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptVehicle.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptVehicle", JSON.stringify(formDataReceiptVehicle));
    }
    function getReceiptVehicle() {
        if(localStorage.formDataReceiptVehicle !== undefined){
            const formDataReceiptVehicle = JSON.parse(localStorage.formDataReceiptVehicle);
            for (var i = 0; i < formDataReceiptVehicle.length; i++) {
                $(`#receipt-form-vehicle [name=${formDataReceiptVehicle[i].name}]`).val(formDataReceiptVehicle[i].value);
            }
        }
    }
    function getReceiptVehicleList() {
        if(localStorage.formDataReceiptVehicle !== undefined){
            const formDataReceiptVehicle = JSON.parse(localStorage.formDataReceiptVehicle);
            const lengthReceiptVehicle = Math.trunc(formDataReceiptVehicle.length / 2);
            const listReceiptVehicleElement1 = $("#list-vehicle-receipt1");
            const listReceiptVehicleElement2 = $("#list-vehicle-receipt2");
            for (let i = 0; i < lengthReceiptVehicle; i++) {
                listReceiptVehicleElement1.append(`<li class="list-group-item">${formDataReceiptVehicle[i].label}: ${formDataReceiptVehicle[i].value}</li>`);
            }
            for (let i = lengthReceiptVehicle; i < formDataReceiptVehicle.length; i++) {
                listReceiptVehicleElement2.append(`<li class="list-group-item">${formDataReceiptVehicle[i].label}: ${formDataReceiptVehicle[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Funeral -->
<script>
    function storeValuesPolicyFuneral() {
        let formDataPolicyFuneral = [];
        localStorage.removeItem('formDataPolicyFuneral');
        $('#policy-form-funeral input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-funeral input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-funeral input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-funeral input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-funeral select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-funeral #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-funeral #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyFuneral.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyFuneral", JSON.stringify(formDataPolicyFuneral));
    }
    function getPolicyFuneral() {
        if(localStorage.formDataPolicyFuneral !== undefined){
            const formDataPolicyFuneral = JSON.parse(localStorage.formDataPolicyFuneral);
            for (var i = 0; i < formDataPolicyFuneral.length; i++) {
                $(`#policy-form-funeral [name=${formDataPolicyFuneral[i].name}]`).val(formDataPolicyFuneral[i].value);
                if ((formDataPolicyFuneral[i].name === 'tomador_asegurado_poliza') && (formDataPolicyFuneral[i].value === true)) {
                    $('#policy-form-funeral #tomador_asegurado_poliza').prop('checked', formDataPolicyFuneral[i].value);
                }
                if ((formDataPolicyFuneral[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyFuneral[i].value === true)) {
                    $('#policy-form-funeral #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyFuneral[i].value);
                    $('#policy-form-funeral #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyFuneral[i].name === 'tipo_canal_poliza') && (formDataPolicyFuneral[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-funeral #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyFuneralList() {
        if(localStorage.formDataPolicyFuneral !== undefined){
            const formDataPolicyFuneral = JSON.parse(localStorage.formDataPolicyFuneral);
            const lengthPolicyFuneral = Math.trunc(formDataPolicyFuneral.length / 2);
            const listFuneralElement1 = $("#list-funeral-policy1");
            const listFuneralElement2 = $("#list-funeral-policy2");
            for (let i = 0; i < lengthPolicyFuneral; i++) {
                listFuneralElement1.append(`<li class="list-group-item">${formDataPolicyFuneral[i].label}: ${formDataPolicyFuneral[i].value}</li>`);
            }
            for (let i = lengthPolicyFuneral; i < formDataPolicyFuneral.length; i++) {
                listFuneralElement2.append(`<li class="list-group-item">${formDataPolicyFuneral[i].label}: ${formDataPolicyFuneral[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraFuneral() {
        let formDataExtraFuneral = [];
        let recoveredData = localStorage.getItem("formDataExtraFuneralCompleted");
        localStorage.removeItem('formDataExtraFuneral');
        $('#extra-form-funeral input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-funeral input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-funeral select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataExtraFuneral", JSON.stringify(formDataExtraFuneral));
        if(recoveredData == null){
            localStorage.setItem("formDataExtraFuneralCompleted", JSON.stringify(formDataExtraFuneral));
        } else {
            let data = JSON.parse(recoveredData)
            $('#extra-form-funeral input[type=text]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-funeral input[type=date]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-funeral select').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            localStorage.setItem('formDataExtraFuneralCompleted', JSON.stringify(data))
        }
    }
    function getExtraFuneral() {
        if(localStorage.formDataExtraFuneral !== undefined){
            const formDataExtraFuneral = JSON.parse(localStorage.formDataExtraFuneral);
            for (var i = 0; i < formDataExtraFuneral.length; i++) {
                $(`#extra-form-funeral [name=${formDataExtraFuneral[i].name}]`).val(formDataExtraFuneral[i].value);
            }
        }
    }
    function getExtraFuneralList() {
        if(localStorage.formDataExtraFuneralCompleted !== undefined){
            const formDataExtraFuneralCompleted = JSON.parse(localStorage.formDataExtraFuneralCompleted);
            const lengthExtraFuneral = Math.trunc(formDataExtraFuneralCompleted.length / 2);
            const listExtraFuneralElement1 = $("#list-funeral-extra1");
            const listExtraFuneralElement2 = $("#list-funeral-extra2");
            for (let i = 0; i < lengthExtraFuneral; i++) {
                listExtraFuneralElement1.append(`<li class="list-group-item">${formDataExtraFuneralCompleted[i].label}: ${formDataExtraFuneralCompleted[i].value}</li>`);
            }
            for (let i = lengthExtraFuneral; i < formDataExtraFuneralCompleted.length; i++) {
                listExtraFuneralElement2.append(`<li class="list-group-item">${formDataExtraFuneralCompleted[i].label}: ${formDataExtraFuneralCompleted[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptFuneral() {
        let formDataReceiptFuneral = [];
        localStorage.removeItem('formDataReceiptFuneral');
        $('#receipt-form-funeral input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-funeral input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-funeral input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-funeral select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptFuneral.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptFuneral", JSON.stringify(formDataReceiptFuneral));
    }
    function getReceiptFuneral() {
        if(localStorage.formDataReceiptFuneral !== undefined){
            const formDataReceiptFuneral = JSON.parse(localStorage.formDataReceiptFuneral);
            for (var i = 0; i < formDataReceiptFuneral.length; i++) {
                $(`#receipt-form-funeral [name=${formDataReceiptFuneral[i].name}]`).val(formDataReceiptFuneral[i].value);
            }
        }
    }
    function getReceiptFuneralList() {
        if(localStorage.formDataReceiptFuneral !== undefined){
            const formDataReceiptFuneral = JSON.parse(localStorage.formDataReceiptFuneral);
            const lengthReceiptFuneral = Math.trunc(formDataReceiptFuneral.length / 2);
            const listReceiptFuneralElement1 = $("#list-funeral-receipt1");
            const listReceiptFuneralElement2 = $("#list-funeral-receipt2");
            for (let i = 0; i < lengthReceiptFuneral; i++) {
                listReceiptFuneralElement1.append(`<li class="list-group-item">${formDataReceiptFuneral[i].label}: ${formDataReceiptFuneral[i].value}</li>`);
            }
            for (let i = lengthReceiptFuneral; i < formDataReceiptFuneral.length; i++) {
                listReceiptFuneralElement2.append(`<li class="list-group-item">${formDataReceiptFuneral[i].label}: ${formDataReceiptFuneral[i].value}</li>`);
            }
        }
    }
</script>

<!-- Poliza de Vida -->
<script>
    function storeValuesPolicyLife() {
        let formDataPolicyLife = [];
        localStorage.removeItem('formDataPolicyLife');
        $('#policy-form-life input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-life input[type=email]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyLife.push({label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-life input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-life input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-life select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataPolicyLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#policy-form-life #tomador_asegurado_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyLife.push({ label: labelName, name: this.name, value: markedCheck });
        });
        $('#policy-form-life #fraccionamiento_boolean_poliza').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            let markedCheck = $(this).prop('checked');
            formDataPolicyLife.push({ label: labelName, name: this.name, value: markedCheck });
        });
        localStorage.setItem("formDataPolicyLife", JSON.stringify(formDataPolicyLife));
    }
    function getPolicyLife() {
        if(localStorage.formDataPolicyLife !== undefined){
            const formDataPolicyLife = JSON.parse(localStorage.formDataPolicyLife);
            for (var i = 0; i < formDataPolicyLife.length; i++) {
                $(`#policy-form-life [name=${formDataPolicyLife[i].name}]`).val(formDataPolicyLife[i].value);
                if ((formDataPolicyLife[i].name === 'tomador_asegurado_poliza') && (formDataPolicyLife[i].value === true)) {
                    $('#policy-form-life #tomador_asegurado_poliza').prop('checked', formDataPolicyLife[i].value);
                }
                if ((formDataPolicyLife[i].name === 'fraccionamiento_boolean_poliza') && (formDataPolicyLife[i].value === true)) {
                    $('#policy-form-life #fraccionamiento_boolean_poliza').prop('checked', formDataPolicyLife[i].value);
                    $('#policy-form-life #active-select-1').css('display', 'inline');
                }
                if ((formDataPolicyLife[i].name === 'tipo_canal_poliza') && (formDataPolicyLife[i].value === 'AGENTE PROPIO')) {
                    $('#policy-form-life #searchList').css('display', 'block');
                }
            }
        }
    }
    function getPolicyLifeList() {
        if(localStorage.formDataPolicyLife !== undefined){
            const formDataPolicyLife = JSON.parse(localStorage.formDataPolicyLife);
            const lengthPolicyLife = Math.trunc(formDataPolicyLife.length / 2);
            const listLifeElement1 = $("#list-life-policy1");
            const listLifeElement2 = $("#list-life-policy2");
            for (let i = 0; i < lengthPolicyLife; i++) {
                listLifeElement1.append(`<li class="list-group-item">${formDataPolicyLife[i].label}: ${formDataPolicyLife[i].value}</li>`);
            }
            for (let i = lengthPolicyLife; i < formDataPolicyLife.length; i++) {
                listLifeElement2.append(`<li class="list-group-item">${formDataPolicyLife[i].label}: ${formDataPolicyLife[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesExtraLife() {
        let formDataExtraLife = [];
        let recoveredData = localStorage.getItem("formDataExtraLifeCompleted");
        localStorage.removeItem('formDataExtraLife');
        $('#extra-form-life input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-life input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#extra-form-life select').each(function(){
            const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
            formDataExtraLife.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataExtraLife", JSON.stringify(formDataExtraLife));
        if(recoveredData == null){
            localStorage.setItem("formDataExtraLifeCompleted", JSON.stringify(formDataExtraLife));
        } else {
            let data = JSON.parse(recoveredData)
            $('#extra-form-life input[type=text]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-life input[type=date]').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            $('#extra-form-life select').each(function(){
                const labelName = $(this).closest('.col-sm-9').siblings('.col-form-label').text();
                data.push({ label: labelName, name: this.name, value: this.value });
            });
            localStorage.setItem('formDataExtraLifeCompleted', JSON.stringify(data))
        }
    }
    function getExtraLife() {
        if(localStorage.formDataExtraLife !== undefined){
            const formDataExtraLife = JSON.parse(localStorage.formDataExtraLife);
            for (var i = 0; i < formDataExtraLife.length; i++) {
                $(`#extra-form-life [name=${formDataExtraLife[i].name}]`).val(formDataExtraLife[i].value);
            }
        }
    }
    function getExtraLifeList() {
        if(localStorage.formDataExtraLifeCompleted !== undefined){
            const formDataExtraLifeCompleted = JSON.parse(localStorage.formDataExtraLifeCompleted);
            const lengthExtraLife = Math.trunc(formDataExtraLifeCompleted.length / 2);
            const listExtraLifeElement1 = $("#list-life-extra1");
            const listExtraLifeElement2 = $("#list-life-extra2");
            for (let i = 0; i < lengthExtraLife; i++) {
                listExtraLifeElement1.append(`<li class="list-group-item">${formDataExtraLifeCompleted[i].label}: ${formDataExtraLifeCompleted[i].value}</li>`);
            }
            for (let i = lengthExtraLife; i < formDataExtraLifeCompleted.length; i++) {
                listExtraLifeElement2.append(`<li class="list-group-item">${formDataExtraLifeCompleted[i].label}: ${formDataExtraLifeCompleted[i].value}</li>`);
            }
        }
    }
</script>

<script>
    function storeValuesReceiptLife() {
        let formDataReceiptLife = [];
        localStorage.removeItem('formDataReceiptLife');
        $('#receipt-form-life input[type=text]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-life input[type=number]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-life input[type=date]').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptLife.push({ label: labelName, name: this.name, value: this.value });
        });
        $('#receipt-form-life select').each(function(){
            const labelName = $(this).closest('.col-sm-8').siblings('.col-form-label').text();
            formDataReceiptLife.push({ label: labelName, name: this.name, value: this.value });
        });
        localStorage.setItem("formDataReceiptLife", JSON.stringify(formDataReceiptLife));
    }
    function getReceiptLife() {
        if(localStorage.formDataReceiptLife !== undefined){
            const formDataReceiptLife = JSON.parse(localStorage.formDataReceiptLife);
            for (var i = 0; i < formDataReceiptLife.length; i++) {
                $(`#receipt-form-life [name=${formDataReceiptLife[i].name}]`).val(formDataReceiptLife[i].value);
            }
        }
    }
    function getReceiptLifeList() {
        if(localStorage.formDataReceiptLife !== undefined){
            const formDataReceiptLife = JSON.parse(localStorage.formDataReceiptLife);
            const lengthReceiptLife = Math.trunc(formDataReceiptLife.length / 2);
            const listReceiptLifeElement1 = $("#list-life-receipt1");
            const listReceiptLifeElement2 = $("#list-life-receipt2");
            for (let i = 0; i < lengthReceiptLife; i++) {
                listReceiptLifeElement1.append(`<li class="list-group-item">${formDataReceiptLife[i].label}: ${formDataReceiptLife[i].value}</li>`);
            }
            for (let i = lengthReceiptLife; i < formDataReceiptLife.length; i++) {
                listReceiptLifeElement2.append(`<li class="list-group-item">${formDataReceiptLife[i].label}: ${formDataReceiptLife[i].value}</li>`);
            }
        }
    }
</script>

<script>
    $(document).ready(function () {
        // Poliza Salud
        $("#btn_health_policy").on('click', function (event) {
            storeValuesPolicyHealth();
        });
        $("#btn_health_extra").on('click', function (event) {
            storeValuesExtraHealth();
        });
        $("#btn_health_receipt").on('click', function (event) {
            storeValuesReceiptHealth();
        });

        $("#btn_health_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyHealth();
        getPolicyHealthList();
        getExtraHealth();
        getExtraHealthList();
        getReceiptHealth();
        getReceiptHealthList();

        // Poliza Vehiculo
        $("#btn_vehicle_policy").on('click', function (event) {
            storeValuesPolicyVehicle();
        });
        $("#btn_vehicle_extra").on('click', function (event) {
            storeValuesExtraVehicle();
        });
        $("#btn_vehicle_receipt").on('click', function (event) {
            storeValuesReceiptVehicle();
        });

        $("#btn_vehicle_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyVehicle();
        getPolicyVehicleList();
        getExtraVehicle();
        getExtraVehicleList();
        getReceiptVehicle();
        getReceiptVehicleList();

        // Poliza Funeral
        $("#btn_funeral_policy").on('click', function (event) {
            storeValuesPolicyFuneral();
        });
        $("#btn_funeral_extra").on('click', function (event) {
            storeValuesExtraFuneral();
        });
        $("#btn_funeral_receipt").on('click', function (event) {
            storeValuesReceiptFuneral();
        });

        $("#btn_funeral_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyFuneral();
        getPolicyFuneralList();
        getExtraFuneral();
        getExtraFuneralList();
        getReceiptFuneral();
        getReceiptFuneralList();

        // Poliza Vida
        $("#btn_life_policy").on('click', function (event) {
            storeValuesPolicyLife();
        });
        $("#btn_life_extra").on('click', function (event) {
            storeValuesExtraLife();
        });
        $("#btn_life_receipt").on('click', function (event) {
            storeValuesReceiptLife();
        });

        $("#btn_life_list").on('click', function (event) {
            localStorage.clear();
        });

        getPolicyLife();
        getPolicyLifeList();
        getExtraLife();
        getExtraLifeList();
        getReceiptLife();
        getReceiptLifeList();

        if ($('#tipo_canal_poliza').val() === 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        }

        if ($('#fraccionamiento_boolean_poliza').prop('checked') === true) {
            document.getElementById("active-select-1").style.display = "inline";
        }

        if (($('#select_box').val() === 'V') || ($('#select_box').val() === 'E')) {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });
        } else {
            var cleaveNumeral = new Cleave('.input-numeral', {
                numeral: true,
                numeralDecimalMark: '!',
                delimiter: '',
                stripLeadingZeroes: false
            });
        }

        $('#select_box').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false,
                });
                cleaveNumeral.setRawValue('');
            }
        });
        
        if (($('#select_box2').val() === 'V') || ($('#select_box2').val() === 'E')) {
            var cleaveNumeral = new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                stripLeadingZeroes: false
            });
        } else {
            var cleaveNumeral = new Cleave('.input-numeral2', {
                numeral: true,
                numeralDecimalMark: '!',
                delimiter: '',
                stripLeadingZeroes: false
            });
        }

        $('#select_box2').change(function(){
            if ((this.value === 'V') || (this.value === 'E')) {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            } else {
                var cleaveNumeral = new Cleave('.input-numeral2', {
                    numeral: true,
                    numeralDecimalMark: '!',
                    delimiter: '',
                    stripLeadingZeroes: false
                });
                cleaveNumeral.setRawValue('');
            }
        });

        $('#fecha_desde_poliza').change(function () {
            var extraer = $('#fecha_desde_poliza').val();
            extraer = extraer.split('-');
            year = parseInt(extraer[0]);
            month = parseInt(extraer[1]) - 1;
            day = parseInt(extraer[2]);
            var fecha = moment([year, month, day]).add(1, 'years');
            fecha = fecha.toISOString().substring(0, 10);
            $('#fecha_hasta_poliza').val(fecha);
        });

        $('.porcentaje_tasa').keyup(function () {
            new Cleave('.porcentaje_tasa', {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '%',
                tailPrefix: true
            });
        });

        if ($('#maternidad_poliza').val() === 'SÍ') {
            document.getElementById("searchinput").style.display = "block";
        }
        if ($('#plazo_espera_poliza').val() === 'SÍ') {
            document.getElementById("searchinput2").style.display = "block";
        }
    });
</script>

<script>
    window.addEventListener("load", function() {
        document.getElementById("radioContainer").addEventListener("click", function() {
            document.getElementById("active-select-1").style.display = document.getElementById("fraccionamiento_boolean_poliza").checked ? "inline" : "none";
        });
    });
</script>

<script>
    window.addEventListener("load", function() {
        document.getElementById("radioContainer2").addEventListener("click", function() {
            document.getElementById("active-select-3").style.display = document.getElementById("blindaje_boolean_vehiculo").checked ? "inline" : "none";
            document.getElementById("active-select-4").style.display = document.getElementById("blindaje_boolean_vehiculo").checked ? "inline" : "none";
        });
    });
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreTomador() {
        var idRif = document.getElementById("id_rif_tomador").value;
        var selectBox = document.getElementById("select_box").value;
        var checkboxTomadorViejo = document.getElementById("tomador_asegurado_poliza").checked;
        if ((selectBox === 'J') || (selectBox === 'G') || (selectBox === 'I') || (selectBox === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_tomador").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_tomador_poliza").value = elementLegalInsured.razon_social_per_jur;
                    if (checkboxTomadorViejo === true) {
                        document.getElementById("select_box2").value = elementLegalInsured.tipo_rif_asegurado_per_jur;
                        document.getElementById("id_rif_asegurado").value = elementLegalInsured.rif_asegurado_per_jur;
                        document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                        document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    } else {
                        document.getElementById("select_box2").value = 'V';
                        document.getElementById("id_rif_asegurado").value = ''
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                    break;
                } else {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_poliza").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_tomador").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_tomador_poliza").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        if (checkboxTomadorViejo === true) {
                            document.getElementById("select_box2").value = elementNaturalInsured.tipo_cedula_asegurado_per_nat;
                            document.getElementById("id_rif_asegurado").value = elementNaturalInsured.cedula_asegurado_per_nat;
                            document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                            document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        } else {
                            document.getElementById("select_box2").value = 'V';
                            document.getElementById("id_rif_asegurado").value = ''
                            document.getElementById("correo_asegurado").value = '';
                            document.getElementById("nombre_asegurado").value = '';
                        }
                        break;
                    } else {
                        document.getElementById("correo_tomador").value = '';
                        document.getElementById("nombre_tomador_poliza").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_tomador").value = '';
                    document.getElementById("nombre_tomador_poliza").value = '';
                }
            }
        }
    }
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    var legalInsureds = <%- JSON.stringify(legalInsureds) %>;
    function pasarNombreAsegurado() {
        var idRif = document.getElementById("id_rif_asegurado").value;
        var selectBox2 = document.getElementById("select_box2").value;
        if ((selectBox2 === 'J') || (selectBox2 === 'G') || (selectBox2 === 'I') || (selectBox2 === 'F')) {
            for (let i = 0; i < legalInsureds.length; i++) {
                let elementLegalInsured = legalInsureds[i];
                if ((selectBox2 === elementLegalInsured.tipo_rif_asegurado_per_jur) && (idRif === elementLegalInsured.rif_asegurado_per_jur)) {
                    document.getElementById("correo_asegurado").value = elementLegalInsured.correo_asegurado_per_jur;
                    document.getElementById("nombre_asegurado").value = elementLegalInsured.razon_social_per_jur;
                    break;
                } else {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        } else {
            for (let i = 0; i < naturalInsureds.length; i++) {
                let elementNaturalInsured = naturalInsureds[i];
                if (idRif.match(/^\d/)) {
                    if ((selectBox2 === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (idRif === elementNaturalInsured.cedula_asegurado_per_nat)) {
                        document.getElementById("correo_asegurado").value = elementNaturalInsured.correo_asegurado_per_nat;
                        document.getElementById("nombre_asegurado").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                        break;
                    } else {
                        document.getElementById("correo_asegurado").value = '';
                        document.getElementById("nombre_asegurado").value = '';
                    }
                } else if (idRif.startsWith('')) {
                    document.getElementById("correo_asegurado").value = '';
                    document.getElementById("nombre_asegurado").value = '';
                }
            }
        }
    }
</script>

<script>
    var naturalInsureds = <%- JSON.stringify(naturalInsureds) %>;
    function pasarNombreAseguradoConductor() {
        var cedulaConductor = document.getElementById("cedula_conductor").value;
        var selectBox3 = document.getElementById("select_box3").value;
        for (let i = 0; i < naturalInsureds.length; i++) {
            let elementNaturalInsured = naturalInsureds[i];
            if (cedulaConductor.match(/^\d/)) {
                if ((selectBox3 === elementNaturalInsured.tipo_cedula_asegurado_per_nat) && (cedulaConductor === elementNaturalInsured.cedula_asegurado_per_nat)) {
                    document.getElementById("nombre_conductor_vehiculo").value = elementNaturalInsured.nombre_asegurado_per_nat + ' ' + elementNaturalInsured.apellido_asegurado_per_nat;
                    break;
                } else {
                    document.getElementById("nombre_conductor_vehiculo").value = '';
                }
            } else if (cedulaConductor.startsWith('')) {
                document.getElementById("nombre_conductor_vehiculo").value = '';
            }
        }
    }
</script>


<script>
    function showInput() {
        var getSelectValue = document.getElementById("maternidad_poliza").value;
        if (getSelectValue === 'SÍ') {
            document.getElementById("searchinput").style.display = "block";
        } else if (getSelectValue === 'NO') {
            document.getElementById("tipo_cobertura_poliza").value = '';
            document.getElementById("searchinput").style.display = "none";
        }
    }   
</script>

<script>
    function showInput2() {
        var getSelectValue = document.getElementById("plazo_espera_poliza").value;
        if (getSelectValue === 'SÍ') {
            document.getElementById("searchinput2").style.display = "block";
        } else if (getSelectValue === 'NO') {
            document.getElementById("detalle_cliente_poliza").value = '';
            document.getElementById("searchinput2").style.display = "none";
        }
    }
</script>

<script>
    function showList() {
        var getSelectValue = document.getElementById("tipo_canal_poliza").value;
        if (getSelectValue === 'AGENTE PROPIO') {
            document.getElementById("searchList").style.display = "block";
        } else {
            document.getElementById("nombre_agentes_propios").value = '';
            document.getElementById("searchList").style.display = "none";
        }
    }
</script>

<script>
    function currencySignChange() {
        let coinType = document.getElementById("tipo_moneda_poliza").value;
        if (coinType === 'BOLÍVAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
            });
        } else if (coinType === 'DÓLAR') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
            });
        } else if (coinType === 'EUROS') {
            $('.currency_format').toArray().forEach(function(field) {
                new Cleave(field, {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
            });
        }
    }   
</script>

<script>
    function premiumCalculationDate() {
        var getSelectValue = document.getElementById("tipo_fraccionamiento_poliza").value;
        var checkboxDivision = document.getElementById("fraccionamiento_boolean_poliza").checked;
        if (getSelectValue === 'MENSUAL') {
            document.getElementById("numero_pago_poliza").value = '';
        } else if (getSelectValue === 'BIMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 6;
        } else if (getSelectValue === 'TRIMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 4;
        } else if (getSelectValue === 'SEMESTRAL') {
            document.getElementById("numero_pago_poliza").value = 2;
        }  else if (getSelectValue === 'ANUAL') {
            document.getElementById("numero_pago_poliza").value = 1;
        }
        if (checkboxDivision === false) {
            document.getElementById("numero_pago_poliza").value = 0;
            document.getElementById("tipo_fraccionamiento_poliza").value = '';
        }
    }
</script>

<script>
    function premiumCalculation() {
        let netPremium = document.getElementById("prima_neta_poliza").value;
        let coinType = document.getElementById("tipo_moneda_poliza").value;
        netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
        if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
            netPremium = netPremium.replaceAll(".", "");
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        } else if (netPremium.indexOf(',') !== -1) {
            netPremium = netPremium.replace(",", ".");
            netPremium = parseFloat(netPremium);
        } else if (netPremium.indexOf('.') !== -1) {
            netPremium = netPremium.replaceAll(".", ",");
            netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
        }
        let igtf = Number(netPremium) * 0.03;
        let totalPremium = Number(netPremium) + Number(igtf);
        igtf = igtf.toFixed(2);
        totalPremium = totalPremium.toFixed(2);
        if (coinType === 'BOLÍVAR') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: 'Bs ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'DÓLAR') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '$ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        } else if (coinType === 'EUROS') {
            const cleaveIgtf = new Cleave("#igtf_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveIgtf.setRawValue(igtf);
            const cleaveTotalPremium = new Cleave("#prima_total_poliza", {
                numeral: true,
                numeralDecimalMark: ',',
                delimiter: '.',
                prefix: '€ ',
            });
            cleaveTotalPremium.setRawValue(totalPremium);
        }
    }
</script>

<% if (Object.keys(policy).length !== 0) { %>
    <script>
        var policy = <%- JSON.stringify(policy) %>;
        function dateAutomation() {
            if (policy.tipo_fraccionamiento_poliza === 'MENSUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'BIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(2, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'TRIMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(3, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            } else if (policy.tipo_fraccionamiento_poliza === 'SEMESTRAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(6, 'months');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }  else if (policy.tipo_fraccionamiento_poliza === 'ANUAL') {
                var extraer = $('#fecha_desde_recibo').val();
                extraer = extraer.split('-');
                year = parseInt(extraer[0]);
                month = parseInt(extraer[1]) - 1;
                day = parseInt(extraer[2]);
                var fecha = moment([year, month, day]).add(1, 'years');
                fecha = fecha.toISOString().substring(0, 10);
                $('#fecha_hasta_recibo').val(fecha);
            }
        }
    </script>

    <script>
        var policy = <%- JSON.stringify(policy) %>;
        window.onload = function() {
            let netPremium = document.getElementById("prima_neta_recibo").value;
            netPremium = netPremium.replace(/[Bs$€]/g, '').replace(' ', '');
            if ((netPremium.indexOf(',') !== -1) && (netPremium.indexOf('.') !== -1)) {
                netPremium = netPremium.replaceAll(".", "");
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            } else if (netPremium.indexOf(',') !== -1) {
                netPremium = netPremium.replace(",", ".");
                netPremium = parseFloat(netPremium);
            } else if (netPremium.indexOf('.') !== -1) {
                netPremium = netPremium.replaceAll(".", ",");
                netPremium = parseFloat(netPremium.replaceAll(/,/g,''));
            }
            let igtf = Number(netPremium) * 0.03;
            let totalPremium = Number(netPremium) + Number(igtf);
            igtf = igtf.toFixed(2);
            totalPremium = totalPremium.toFixed(2);
            if (policy.tipo_moneda_poliza === 'BOLÍVAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: 'Bs ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (policy.tipo_moneda_poliza === 'DÓLAR') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '$ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            } else if (policy.tipo_moneda_poliza === 'EUROS') {
                const cleaveIgtfReceipt = new Cleave("#igtf_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveIgtfReceipt.setRawValue(igtf);
                const cleaveTotalPremiumReceipt = new Cleave("#prima_total_recibo", {
                    numeral: true,
                    numeralDecimalMark: ',',
                    delimiter: '.',
                    prefix: '€ ',
                });
                cleaveTotalPremiumReceipt.setRawValue(totalPremium);
            }
            if (policy.tipo_moneda_poliza === 'BOLÍVAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: 'Bs ',
                    });
                });
            } else if (policy.tipo_moneda_poliza === 'DÓLAR') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '$ ',
                    });
                });
            } else if (policy.tipo_moneda_poliza === 'EUROS') {
                $('.currency_format_number').toArray().forEach(function(field) {
                    new Cleave(field, {
                        numeral: true,
                        numeralDecimalMark: ',',
                        delimiter: '.',
                        prefix: '€ ',
                    });
                });
            }
        }   
    </script>
<% } %>

<% if (typeof(data) !== 'undefined') { %>
    <script>
        var lista = <%- JSON.stringify(data) %>;
        var tablaBeneficiarioSalud = null;
        $(document).ready(function(){
            tablaBeneficiarioSalud = $('#tablaBeneficiariosSalud').DataTable({
                pageLength: 25,
                responsive: true,
                dom: '<"html5buttons"B>lTfgitp',
                processing: true,
                serverSide: false,
                columns: [
                    {"data": "nombre_beneficiario"},
                    {"data": "apellido_beneficiario"},
                    {"data": "parentesco_beneficiario"},
                    {
                        "data": "",
                        "render": (data, type, row) => {
                                return `<form class="form-inline" method="post" action="/sistema/remove-health-beneficiary/${row.id_beneficiario}">
                                            <div class="row">
                                                <div class="col-sm-6 col-lg-12" style="padding-bottom: 10px;">
                                                    <button 
                                                        class="btn btn-danger" 
                                                        type="submit"
                                                        onclick="return confirm('¿Estás seguro de que quieres deshabilitar este registro?');"
                                                    >
                                                        <i class="fa fa-ban"></i>
                                                    </button>
                                                </div> 
                                                <div class="col-sm-6 col-lg-12">
                                                    <textarea 
                                                        name="obser_deshabilitar_beneficiario"
                                                        id="obser_deshabilitar_beneficiario" 
                                                        placeholder="Observaciones de Deshabilitar *" 
                                                        class="form-control"
                                                        oninput="let p=this.selectionStart;this.value=this.value.toUpperCase();this.setSelectionRange(p, p);"
                                                    ></textarea>
                                                </div>
                                            </div>
                                        </form>`;
                        }
                    }
                ],
                buttons: [
                    {
                        extend: 'print',
                        customize: function (win){
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');
                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        },
                        text: 'Imprimir'
                    }
                ],
                language: {
                    "decimal": "",
                    "emptyTable": "No hay información",
                    "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                    "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                    "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                    "infoPostFix": "",
                    "thousands": ".",
                    "lengthMenu": "Mostrar _MENU_ Entradas",
                    "loadingRecords": "Cargando...",
                    "processing": "Procesando...",
                    "search": "Buscar:",
                    "zeroRecords": "Sin resultados encontrados",
                    "paginate": {
                        "first": "Primero",
                        "last": "Último",
                        "next": "Siguiente",
                        "previous": "Anterior"
                    }
                }
            });
            tablaBeneficiarioSalud.rows.add(lista);
            tablaBeneficiarioSalud.draw();
        });
    </script>

    <script>
        var lista = <%- JSON.stringify(data) %>;
        var tablaBeneficiarioFunerario = null;
        $(document).ready(function(){
            tablaBeneficiarioFunerario = $('#tablaBeneficiariosFunerario').DataTable({
                pageLength: 25,
                responsive: true,
                dom: '<"html5buttons"B>lTfgitp',
                processing: true,
                serverSide: false,
                columns: [
                    {"data": "nombre_beneficiario"},
                    {"data": "apellido_beneficiario"},
                    {"data": "parentesco_beneficiario"},
                    {
                        "data": "",
                        "render": (data, type, row) => {
                                return `<form class="form-inline" method="post" action="/sistema/remove-funeral-beneficiary/${row.id_beneficiario}">
                                            <div class="row">
                                                <div class="col-sm-6 col-lg-12" style="padding-bottom: 10px;">
                                                    <button 
                                                        class="btn btn-danger" 
                                                        type="submit"
                                                        onclick="return confirm('¿Estás seguro de que quieres deshabilitar este registro?');"
                                                    >
                                                        <i class="fa fa-ban"></i>
                                                    </button>
                                                </div> 
                                                <div class="col-sm-6 col-lg-12">
                                                    <textarea 
                                                        name="obser_deshabilitar_beneficiario"
                                                        id="obser_deshabilitar_beneficiario" 
                                                        placeholder="Observaciones de Deshabilitar *" 
                                                        class="form-control"
                                                        oninput="let p=this.selectionStart;this.value=this.value.toUpperCase();this.setSelectionRange(p, p);"
                                                    ></textarea>
                                                </div>
                                            </div>
                                        </form>`;
                        }
                    }
                ],
                buttons: [
                    {
                        extend: 'print',
                        customize: function (win){
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');
                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        },
                        text: 'Imprimir'
                    }
                ],
                language: {
                    "decimal": "",
                    "emptyTable": "No hay información",
                    "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                    "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                    "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                    "infoPostFix": "",
                    "thousands": ".",
                    "lengthMenu": "Mostrar _MENU_ Entradas",
                    "loadingRecords": "Cargando...",
                    "processing": "Procesando...",
                    "search": "Buscar:",
                    "zeroRecords": "Sin resultados encontrados",
                    "paginate": {
                        "first": "Primero",
                        "last": "Último",
                        "next": "Siguiente",
                        "previous": "Anterior"
                    }
                }
            });
            tablaBeneficiarioFunerario.rows.add(lista);
            tablaBeneficiarioFunerario.draw();
        });
    </script>

    <script>
        var lista = <%- JSON.stringify(data) %>;
        var tablaBeneficiarioVida = null;
        $(document).ready(function(){
            tablaBeneficiarioVida = $('#tablaBeneficiariosVida').DataTable({
                pageLength: 25,
                responsive: true,
                dom: '<"html5buttons"B>lTfgitp',
                processing: true,
                serverSide: false,
                columns: [
                    {"data": "nombre_beneficiario"},
                    {"data": "apellido_beneficiario"},
                    {"data": "parentesco_beneficiario"},
                    {
                        "data": "",
                        "render": (data, type, row) => {
                                return `<form class="form-inline" method="post" action="/sistema/remove-life-beneficiary/${row.id_beneficiario}">
                                            <div class="row">
                                                <div class="col-sm-6 col-lg-12" style="padding-bottom: 10px;">
                                                    <button 
                                                        class="btn btn-danger" 
                                                        type="submit"
                                                        onclick="return confirm('¿Estás seguro de que quieres deshabilitar este registro?');"
                                                    >
                                                        <i class="fa fa-ban"></i>
                                                    </button>
                                                </div> 
                                                <div class="col-sm-6 col-lg-12">
                                                    <textarea 
                                                        name="obser_deshabilitar_beneficiario"
                                                        id="obser_deshabilitar_beneficiario" 
                                                        placeholder="Observaciones de Deshabilitar *" 
                                                        class="form-control"
                                                        oninput="let p=this.selectionStart;this.value=this.value.toUpperCase();this.setSelectionRange(p, p);"
                                                    ></textarea>
                                                </div>
                                            </div>
                                        </form>`;
                        }
                    }
                ],
                buttons: [
                    {
                        extend: 'print',
                        customize: function (win){
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');
                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        },
                        text: 'Imprimir'
                    }
                ],
                language: {
                    "decimal": "",
                    "emptyTable": "No hay información",
                    "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                    "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                    "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                    "infoPostFix": "",
                    "thousands": ".",
                    "lengthMenu": "Mostrar _MENU_ Entradas",
                    "loadingRecords": "Cargando...",
                    "processing": "Procesando...",
                    "search": "Buscar:",
                    "zeroRecords": "Sin resultados encontrados",
                    "paginate": {
                        "first": "Primero",
                        "last": "Último",
                        "next": "Siguiente",
                        "previous": "Anterior"
                    }
                }
            });
            tablaBeneficiarioVida.rows.add(lista);
            tablaBeneficiarioVida.draw();
        });
    </script>
<% } %>

</body>

</html>